# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2013-2021
#
# This file is part of Postgres Backup API.
#
# Postgres Backup API is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Postgres Backup API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Postgres Backup API.  If not, see <http://www.gnu.org/licenses/>.

# This file was autogenerated by OpenAPI Generator.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pg_backup_api.openapi_server.models.base_model_ import Model
from pg_backup_api.openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        archiver=None,
        archiver_batch_size=None,
        backup_method=None,
        backup_options=None,
        bandwidth_limit=None,
        barman_home=None,
        barman_lock_directory=None,
        basebackup_retry_sleep=None,
        basebackup_retry_times=None,
        check_timeout=None,
        compression=None,
        configuration_files_directory=None,
        create_slot=None,
        custom_compression_filter=None,
        custom_compression_magic=None,
        custom_decompression_filter=None,
        forward_config_path=None,
        immediate_checkpoint=None,
        last_backup_maximum_age=None,
        last_backup_minimum_size=None,
        last_wal_maximum_age=None,
        max_incoming_wals_queue=None,
        minimum_redundancy=None,
        network_compression=None,
        parallel_jobs=None,
        path_prefix=None,
        post_archive_retry_script=None,
        post_archive_script=None,
        post_backup_retry_script=None,
        post_backup_script=None,
        post_delete_retry_script=None,
        post_delete_script=None,
        post_recovery_retry_script=None,
        post_recovery_script=None,
        post_wal_delete_retry_script=None,
        post_wal_delete_script=None,
        pre_archive_retry_script=None,
        pre_archive_script=None,
        pre_backup_retry_script=None,
        pre_backup_script=None,
        pre_delete_retry_script=None,
        pre_delete_script=None,
        pre_recovery_retry_script=None,
        pre_recovery_script=None,
        pre_wal_delete_retry_script=None,
        pre_wal_delete_script=None,
        primary_ssh_command=None,
        recovery_options=None,
        retention_policy=None,
        retention_policy_mode=None,
        reuse_backup=None,
        slot_name=None,
        streaming_archiver=None,
        streaming_archiver_batch_size=None,
        streaming_archiver_name=None,
        streaming_backup_name=None,
        tablespace_bandwidth_limit=None,
        wal_retention_policy=None,
    ):  # noqa: E501
        """Config - a model defined in OpenAPI

        :param archiver: The archiver of this Config.  # noqa: E501
        :type archiver: bool
        :param archiver_batch_size: The archiver_batch_size of this Config.  # noqa: E501
        :type archiver_batch_size: int
        :param backup_method: The backup_method of this Config.  # noqa: E501
        :type backup_method: str
        :param backup_options: The backup_options of this Config.  # noqa: E501
        :type backup_options: str
        :param bandwidth_limit: The bandwidth_limit of this Config.  # noqa: E501
        :type bandwidth_limit: int
        :param barman_home: The barman_home of this Config.  # noqa: E501
        :type barman_home: str
        :param barman_lock_directory: The barman_lock_directory of this Config.  # noqa: E501
        :type barman_lock_directory: str
        :param basebackup_retry_sleep: The basebackup_retry_sleep of this Config.  # noqa: E501
        :type basebackup_retry_sleep: int
        :param basebackup_retry_times: The basebackup_retry_times of this Config.  # noqa: E501
        :type basebackup_retry_times: int
        :param check_timeout: The check_timeout of this Config.  # noqa: E501
        :type check_timeout: int
        :param compression: The compression of this Config.  # noqa: E501
        :type compression: str
        :param configuration_files_directory: The configuration_files_directory of this Config.  # noqa: E501
        :type configuration_files_directory: str
        :param create_slot: The create_slot of this Config.  # noqa: E501
        :type create_slot: str
        :param custom_compression_filter: The custom_compression_filter of this Config.  # noqa: E501
        :type custom_compression_filter: str
        :param custom_compression_magic: The custom_compression_magic of this Config.  # noqa: E501
        :type custom_compression_magic: str
        :param custom_decompression_filter: The custom_decompression_filter of this Config.  # noqa: E501
        :type custom_decompression_filter: str
        :param forward_config_path: The forward_config_path of this Config.  # noqa: E501
        :type forward_config_path: bool
        :param immediate_checkpoint: The immediate_checkpoint of this Config.  # noqa: E501
        :type immediate_checkpoint: bool
        :param last_backup_maximum_age: The last_backup_maximum_age of this Config.  # noqa: E501
        :type last_backup_maximum_age: str
        :param last_backup_minimum_size: The last_backup_minimum_size of this Config.  # noqa: E501
        :type last_backup_minimum_size: int
        :param last_wal_maximum_age: The last_wal_maximum_age of this Config.  # noqa: E501
        :type last_wal_maximum_age: str
        :param max_incoming_wals_queue: The max_incoming_wals_queue of this Config.  # noqa: E501
        :type max_incoming_wals_queue: int
        :param minimum_redundancy: The minimum_redundancy of this Config.  # noqa: E501
        :type minimum_redundancy: int
        :param network_compression: The network_compression of this Config.  # noqa: E501
        :type network_compression: bool
        :param parallel_jobs: The parallel_jobs of this Config.  # noqa: E501
        :type parallel_jobs: int
        :param path_prefix: The path_prefix of this Config.  # noqa: E501
        :type path_prefix: str
        :param post_archive_retry_script: The post_archive_retry_script of this Config.  # noqa: E501
        :type post_archive_retry_script: str
        :param post_archive_script: The post_archive_script of this Config.  # noqa: E501
        :type post_archive_script: str
        :param post_backup_retry_script: The post_backup_retry_script of this Config.  # noqa: E501
        :type post_backup_retry_script: str
        :param post_backup_script: The post_backup_script of this Config.  # noqa: E501
        :type post_backup_script: str
        :param post_delete_retry_script: The post_delete_retry_script of this Config.  # noqa: E501
        :type post_delete_retry_script: str
        :param post_delete_script: The post_delete_script of this Config.  # noqa: E501
        :type post_delete_script: str
        :param post_recovery_retry_script: The post_recovery_retry_script of this Config.  # noqa: E501
        :type post_recovery_retry_script: str
        :param post_recovery_script: The post_recovery_script of this Config.  # noqa: E501
        :type post_recovery_script: str
        :param post_wal_delete_retry_script: The post_wal_delete_retry_script of this Config.  # noqa: E501
        :type post_wal_delete_retry_script: str
        :param post_wal_delete_script: The post_wal_delete_script of this Config.  # noqa: E501
        :type post_wal_delete_script: str
        :param pre_archive_retry_script: The pre_archive_retry_script of this Config.  # noqa: E501
        :type pre_archive_retry_script: str
        :param pre_archive_script: The pre_archive_script of this Config.  # noqa: E501
        :type pre_archive_script: str
        :param pre_backup_retry_script: The pre_backup_retry_script of this Config.  # noqa: E501
        :type pre_backup_retry_script: str
        :param pre_backup_script: The pre_backup_script of this Config.  # noqa: E501
        :type pre_backup_script: str
        :param pre_delete_retry_script: The pre_delete_retry_script of this Config.  # noqa: E501
        :type pre_delete_retry_script: str
        :param pre_delete_script: The pre_delete_script of this Config.  # noqa: E501
        :type pre_delete_script: str
        :param pre_recovery_retry_script: The pre_recovery_retry_script of this Config.  # noqa: E501
        :type pre_recovery_retry_script: str
        :param pre_recovery_script: The pre_recovery_script of this Config.  # noqa: E501
        :type pre_recovery_script: str
        :param pre_wal_delete_retry_script: The pre_wal_delete_retry_script of this Config.  # noqa: E501
        :type pre_wal_delete_retry_script: str
        :param pre_wal_delete_script: The pre_wal_delete_script of this Config.  # noqa: E501
        :type pre_wal_delete_script: str
        :param primary_ssh_command: The primary_ssh_command of this Config.  # noqa: E501
        :type primary_ssh_command: str
        :param recovery_options: The recovery_options of this Config.  # noqa: E501
        :type recovery_options: str
        :param retention_policy: The retention_policy of this Config.  # noqa: E501
        :type retention_policy: str
        :param retention_policy_mode: The retention_policy_mode of this Config.  # noqa: E501
        :type retention_policy_mode: str
        :param reuse_backup: The reuse_backup of this Config.  # noqa: E501
        :type reuse_backup: str
        :param slot_name: The slot_name of this Config.  # noqa: E501
        :type slot_name: str
        :param streaming_archiver: The streaming_archiver of this Config.  # noqa: E501
        :type streaming_archiver: bool
        :param streaming_archiver_batch_size: The streaming_archiver_batch_size of this Config.  # noqa: E501
        :type streaming_archiver_batch_size: int
        :param streaming_archiver_name: The streaming_archiver_name of this Config.  # noqa: E501
        :type streaming_archiver_name: str
        :param streaming_backup_name: The streaming_backup_name of this Config.  # noqa: E501
        :type streaming_backup_name: str
        :param tablespace_bandwidth_limit: The tablespace_bandwidth_limit of this Config.  # noqa: E501
        :type tablespace_bandwidth_limit: str
        :param wal_retention_policy: The wal_retention_policy of this Config.  # noqa: E501
        :type wal_retention_policy: str
        """
        self.openapi_types = {
            "archiver": bool,
            "archiver_batch_size": int,
            "backup_method": str,
            "backup_options": str,
            "bandwidth_limit": int,
            "barman_home": str,
            "barman_lock_directory": str,
            "basebackup_retry_sleep": int,
            "basebackup_retry_times": int,
            "check_timeout": int,
            "compression": str,
            "configuration_files_directory": str,
            "create_slot": str,
            "custom_compression_filter": str,
            "custom_compression_magic": str,
            "custom_decompression_filter": str,
            "forward_config_path": bool,
            "immediate_checkpoint": bool,
            "last_backup_maximum_age": str,
            "last_backup_minimum_size": int,
            "last_wal_maximum_age": str,
            "max_incoming_wals_queue": int,
            "minimum_redundancy": int,
            "network_compression": bool,
            "parallel_jobs": int,
            "path_prefix": str,
            "post_archive_retry_script": str,
            "post_archive_script": str,
            "post_backup_retry_script": str,
            "post_backup_script": str,
            "post_delete_retry_script": str,
            "post_delete_script": str,
            "post_recovery_retry_script": str,
            "post_recovery_script": str,
            "post_wal_delete_retry_script": str,
            "post_wal_delete_script": str,
            "pre_archive_retry_script": str,
            "pre_archive_script": str,
            "pre_backup_retry_script": str,
            "pre_backup_script": str,
            "pre_delete_retry_script": str,
            "pre_delete_script": str,
            "pre_recovery_retry_script": str,
            "pre_recovery_script": str,
            "pre_wal_delete_retry_script": str,
            "pre_wal_delete_script": str,
            "primary_ssh_command": str,
            "recovery_options": str,
            "retention_policy": str,
            "retention_policy_mode": str,
            "reuse_backup": str,
            "slot_name": str,
            "streaming_archiver": bool,
            "streaming_archiver_batch_size": int,
            "streaming_archiver_name": str,
            "streaming_backup_name": str,
            "tablespace_bandwidth_limit": str,
            "wal_retention_policy": str,
        }

        self.attribute_map = {
            "archiver": "archiver",
            "archiver_batch_size": "archiver_batch_size",
            "backup_method": "backup_method",
            "backup_options": "backup_options",
            "bandwidth_limit": "bandwidth_limit",
            "barman_home": "barman_home",
            "barman_lock_directory": "barman_lock_directory",
            "basebackup_retry_sleep": "basebackup_retry_sleep",
            "basebackup_retry_times": "basebackup_retry_times",
            "check_timeout": "check_timeout",
            "compression": "compression",
            "configuration_files_directory": "configuration_files_directory",
            "create_slot": "create_slot",
            "custom_compression_filter": "custom_compression_filter",
            "custom_compression_magic": "custom_compression_magic",
            "custom_decompression_filter": "custom_decompression_filter",
            "forward_config_path": "forward_config_path",
            "immediate_checkpoint": "immediate_checkpoint",
            "last_backup_maximum_age": "last_backup_maximum_age",
            "last_backup_minimum_size": "last_backup_minimum_size",
            "last_wal_maximum_age": "last_wal_maximum_age",
            "max_incoming_wals_queue": "max_incoming_wals_queue",
            "minimum_redundancy": "minimum_redundancy",
            "network_compression": "network_compression",
            "parallel_jobs": "parallel_jobs",
            "path_prefix": "path_prefix",
            "post_archive_retry_script": "post_archive_retry_script",
            "post_archive_script": "post_archive_script",
            "post_backup_retry_script": "post_backup_retry_script",
            "post_backup_script": "post_backup_script",
            "post_delete_retry_script": "post_delete_retry_script",
            "post_delete_script": "post_delete_script",
            "post_recovery_retry_script": "post_recovery_retry_script",
            "post_recovery_script": "post_recovery_script",
            "post_wal_delete_retry_script": "post_wal_delete_retry_script",
            "post_wal_delete_script": "post_wal_delete_script",
            "pre_archive_retry_script": "pre_archive_retry_script",
            "pre_archive_script": "pre_archive_script",
            "pre_backup_retry_script": "pre_backup_retry_script",
            "pre_backup_script": "pre_backup_script",
            "pre_delete_retry_script": "pre_delete_retry_script",
            "pre_delete_script": "pre_delete_script",
            "pre_recovery_retry_script": "pre_recovery_retry_script",
            "pre_recovery_script": "pre_recovery_script",
            "pre_wal_delete_retry_script": "pre_wal_delete_retry_script",
            "pre_wal_delete_script": "pre_wal_delete_script",
            "primary_ssh_command": "primary_ssh_command",
            "recovery_options": "recovery_options",
            "retention_policy": "retention_policy",
            "retention_policy_mode": "retention_policy_mode",
            "reuse_backup": "reuse_backup",
            "slot_name": "slot_name",
            "streaming_archiver": "streaming_archiver",
            "streaming_archiver_batch_size": "streaming_archiver_batch_size",
            "streaming_archiver_name": "streaming_archiver_name",
            "streaming_backup_name": "streaming_backup_name",
            "tablespace_bandwidth_limit": "tablespace_bandwidth_limit",
            "wal_retention_policy": "wal_retention_policy",
        }

        self._archiver = archiver
        self._archiver_batch_size = archiver_batch_size
        self._backup_method = backup_method
        self._backup_options = backup_options
        self._bandwidth_limit = bandwidth_limit
        self._barman_home = barman_home
        self._barman_lock_directory = barman_lock_directory
        self._basebackup_retry_sleep = basebackup_retry_sleep
        self._basebackup_retry_times = basebackup_retry_times
        self._check_timeout = check_timeout
        self._compression = compression
        self._configuration_files_directory = configuration_files_directory
        self._create_slot = create_slot
        self._custom_compression_filter = custom_compression_filter
        self._custom_compression_magic = custom_compression_magic
        self._custom_decompression_filter = custom_decompression_filter
        self._forward_config_path = forward_config_path
        self._immediate_checkpoint = immediate_checkpoint
        self._last_backup_maximum_age = last_backup_maximum_age
        self._last_backup_minimum_size = last_backup_minimum_size
        self._last_wal_maximum_age = last_wal_maximum_age
        self._max_incoming_wals_queue = max_incoming_wals_queue
        self._minimum_redundancy = minimum_redundancy
        self._network_compression = network_compression
        self._parallel_jobs = parallel_jobs
        self._path_prefix = path_prefix
        self._post_archive_retry_script = post_archive_retry_script
        self._post_archive_script = post_archive_script
        self._post_backup_retry_script = post_backup_retry_script
        self._post_backup_script = post_backup_script
        self._post_delete_retry_script = post_delete_retry_script
        self._post_delete_script = post_delete_script
        self._post_recovery_retry_script = post_recovery_retry_script
        self._post_recovery_script = post_recovery_script
        self._post_wal_delete_retry_script = post_wal_delete_retry_script
        self._post_wal_delete_script = post_wal_delete_script
        self._pre_archive_retry_script = pre_archive_retry_script
        self._pre_archive_script = pre_archive_script
        self._pre_backup_retry_script = pre_backup_retry_script
        self._pre_backup_script = pre_backup_script
        self._pre_delete_retry_script = pre_delete_retry_script
        self._pre_delete_script = pre_delete_script
        self._pre_recovery_retry_script = pre_recovery_retry_script
        self._pre_recovery_script = pre_recovery_script
        self._pre_wal_delete_retry_script = pre_wal_delete_retry_script
        self._pre_wal_delete_script = pre_wal_delete_script
        self._primary_ssh_command = primary_ssh_command
        self._recovery_options = recovery_options
        self._retention_policy = retention_policy
        self._retention_policy_mode = retention_policy_mode
        self._reuse_backup = reuse_backup
        self._slot_name = slot_name
        self._streaming_archiver = streaming_archiver
        self._streaming_archiver_batch_size = streaming_archiver_batch_size
        self._streaming_archiver_name = streaming_archiver_name
        self._streaming_backup_name = streaming_backup_name
        self._tablespace_bandwidth_limit = tablespace_bandwidth_limit
        self._wal_retention_policy = wal_retention_policy

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archiver(self):
        """Gets the archiver of this Config.

        Whether Barman should check for and manage WALs archived to Barman via PostgreSQL WAL archiving   # noqa: E501

        :return: The archiver of this Config.
        :rtype: bool
        """
        return self._archiver

    @archiver.setter
    def archiver(self, archiver):
        """Sets the archiver of this Config.

        Whether Barman should check for and manage WALs archived to Barman via PostgreSQL WAL archiving   # noqa: E501

        :param archiver: The archiver of this Config.
        :type archiver: bool
        """

        self._archiver = archiver

    @property
    def archiver_batch_size(self):
        """Gets the archiver_batch_size of this Config.

        The maximum number of WAL files to be archived by Barman in a single run   # noqa: E501

        :return: The archiver_batch_size of this Config.
        :rtype: int
        """
        return self._archiver_batch_size

    @archiver_batch_size.setter
    def archiver_batch_size(self, archiver_batch_size):
        """Sets the archiver_batch_size of this Config.

        The maximum number of WAL files to be archived by Barman in a single run   # noqa: E501

        :param archiver_batch_size: The archiver_batch_size of this Config.
        :type archiver_batch_size: int
        """

        self._archiver_batch_size = archiver_batch_size

    @property
    def backup_method(self):
        """Gets the backup_method of this Config.

        The method used by Barman for backup execution - one of: local-rsync, postgres or rsync   # noqa: E501

        :return: The backup_method of this Config.
        :rtype: str
        """
        return self._backup_method

    @backup_method.setter
    def backup_method(self, backup_method):
        """Sets the backup_method of this Config.

        The method used by Barman for backup execution - one of: local-rsync, postgres or rsync   # noqa: E501

        :param backup_method: The backup_method of this Config.
        :type backup_method: str
        """

        self._backup_method = backup_method

    @property
    def backup_options(self):
        """Gets the backup_options of this Config.

        A comma-separated list of options - either: `exclusive_backup` or `concurrent_backup` and optionally: `external_configuration`   # noqa: E501

        :return: The backup_options of this Config.
        :rtype: str
        """
        return self._backup_options

    @backup_options.setter
    def backup_options(self, backup_options):
        """Sets the backup_options of this Config.

        A comma-separated list of options - either: `exclusive_backup` or `concurrent_backup` and optionally: `external_configuration`   # noqa: E501

        :param backup_options: The backup_options of this Config.
        :type backup_options: str
        """

        self._backup_options = backup_options

    @property
    def bandwidth_limit(self):
        """Gets the bandwidth_limit of this Config.

        Maximum transfer rate in kilobytes per second  # noqa: E501

        :return: The bandwidth_limit of this Config.
        :rtype: int
        """
        return self._bandwidth_limit

    @bandwidth_limit.setter
    def bandwidth_limit(self, bandwidth_limit):
        """Sets the bandwidth_limit of this Config.

        Maximum transfer rate in kilobytes per second  # noqa: E501

        :param bandwidth_limit: The bandwidth_limit of this Config.
        :type bandwidth_limit: int
        """

        self._bandwidth_limit = bandwidth_limit

    @property
    def barman_home(self):
        """Gets the barman_home of this Config.

        Main data directory for Barman  # noqa: E501

        :return: The barman_home of this Config.
        :rtype: str
        """
        return self._barman_home

    @barman_home.setter
    def barman_home(self, barman_home):
        """Sets the barman_home of this Config.

        Main data directory for Barman  # noqa: E501

        :param barman_home: The barman_home of this Config.
        :type barman_home: str
        """

        self._barman_home = barman_home

    @property
    def barman_lock_directory(self):
        """Gets the barman_lock_directory of this Config.

        Directory for locks  # noqa: E501

        :return: The barman_lock_directory of this Config.
        :rtype: str
        """
        return self._barman_lock_directory

    @barman_lock_directory.setter
    def barman_lock_directory(self, barman_lock_directory):
        """Sets the barman_lock_directory of this Config.

        Directory for locks  # noqa: E501

        :param barman_lock_directory: The barman_lock_directory of this Config.
        :type barman_lock_directory: str
        """

        self._barman_lock_directory = barman_lock_directory

    @property
    def basebackup_retry_sleep(self):
        """Gets the basebackup_retry_sleep of this Config.

        Number of seconds of wait after a failed copy, before retrying  # noqa: E501

        :return: The basebackup_retry_sleep of this Config.
        :rtype: int
        """
        return self._basebackup_retry_sleep

    @basebackup_retry_sleep.setter
    def basebackup_retry_sleep(self, basebackup_retry_sleep):
        """Sets the basebackup_retry_sleep of this Config.

        Number of seconds of wait after a failed copy, before retrying  # noqa: E501

        :param basebackup_retry_sleep: The basebackup_retry_sleep of this Config.
        :type basebackup_retry_sleep: int
        """

        self._basebackup_retry_sleep = basebackup_retry_sleep

    @property
    def basebackup_retry_times(self):
        """Gets the basebackup_retry_times of this Config.

        Number of retries of base backup copy, after an error  # noqa: E501

        :return: The basebackup_retry_times of this Config.
        :rtype: int
        """
        return self._basebackup_retry_times

    @basebackup_retry_times.setter
    def basebackup_retry_times(self, basebackup_retry_times):
        """Sets the basebackup_retry_times of this Config.

        Number of retries of base backup copy, after an error  # noqa: E501

        :param basebackup_retry_times: The basebackup_retry_times of this Config.
        :type basebackup_retry_times: int
        """

        self._basebackup_retry_times = basebackup_retry_times

    @property
    def check_timeout(self):
        """Gets the check_timeout of this Config.

        Maximum execution time, in seconds per server, for a barman check  # noqa: E501

        :return: The check_timeout of this Config.
        :rtype: int
        """
        return self._check_timeout

    @check_timeout.setter
    def check_timeout(self, check_timeout):
        """Sets the check_timeout of this Config.

        Maximum execution time, in seconds per server, for a barman check  # noqa: E501

        :param check_timeout: The check_timeout of this Config.
        :type check_timeout: int
        """

        self._check_timeout = check_timeout

    @property
    def compression(self):
        """Gets the compression of this Config.

        Standard compression algorithm applied to WAL files  # noqa: E501

        :return: The compression of this Config.
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this Config.

        Standard compression algorithm applied to WAL files  # noqa: E501

        :param compression: The compression of this Config.
        :type compression: str
        """

        self._compression = compression

    @property
    def configuration_files_directory(self):
        """Gets the configuration_files_directory of this Config.

        Directory for additional configuration files to be included  # noqa: E501

        :return: The configuration_files_directory of this Config.
        :rtype: str
        """
        return self._configuration_files_directory

    @configuration_files_directory.setter
    def configuration_files_directory(self, configuration_files_directory):
        """Sets the configuration_files_directory of this Config.

        Directory for additional configuration files to be included  # noqa: E501

        :param configuration_files_directory: The configuration_files_directory of this Config.
        :type configuration_files_directory: str
        """

        self._configuration_files_directory = configuration_files_directory

    @property
    def create_slot(self):
        """Gets the create_slot of this Config.

        Whether Barman should automatically create the replication slot - one of `auto` or `manual`   # noqa: E501

        :return: The create_slot of this Config.
        :rtype: str
        """
        return self._create_slot

    @create_slot.setter
    def create_slot(self, create_slot):
        """Sets the create_slot of this Config.

        Whether Barman should automatically create the replication slot - one of `auto` or `manual`   # noqa: E501

        :param create_slot: The create_slot of this Config.
        :type create_slot: str
        """

        self._create_slot = create_slot

    @property
    def custom_compression_filter(self):
        """Gets the custom_compression_filter of this Config.

        Customised compression algorithm applied to WAL files  # noqa: E501

        :return: The custom_compression_filter of this Config.
        :rtype: str
        """
        return self._custom_compression_filter

    @custom_compression_filter.setter
    def custom_compression_filter(self, custom_compression_filter):
        """Sets the custom_compression_filter of this Config.

        Customised compression algorithm applied to WAL files  # noqa: E501

        :param custom_compression_filter: The custom_compression_filter of this Config.
        :type custom_compression_filter: str
        """

        self._custom_compression_filter = custom_compression_filter

    @property
    def custom_compression_magic(self):
        """Gets the custom_compression_magic of this Config.

        Customised compression magic which is checked in the beginning of a WAL file to select the custom algorithm   # noqa: E501

        :return: The custom_compression_magic of this Config.
        :rtype: str
        """
        return self._custom_compression_magic

    @custom_compression_magic.setter
    def custom_compression_magic(self, custom_compression_magic):
        """Sets the custom_compression_magic of this Config.

        Customised compression magic which is checked in the beginning of a WAL file to select the custom algorithm   # noqa: E501

        :param custom_compression_magic: The custom_compression_magic of this Config.
        :type custom_compression_magic: str
        """

        self._custom_compression_magic = custom_compression_magic

    @property
    def custom_decompression_filter(self):
        """Gets the custom_decompression_filter of this Config.

        Customised decompression algorithm applied to compressed WAL files  # noqa: E501

        :return: The custom_decompression_filter of this Config.
        :rtype: str
        """
        return self._custom_decompression_filter

    @custom_decompression_filter.setter
    def custom_decompression_filter(self, custom_decompression_filter):
        """Sets the custom_decompression_filter of this Config.

        Customised decompression algorithm applied to compressed WAL files  # noqa: E501

        :param custom_decompression_filter: The custom_decompression_filter of this Config.
        :type custom_decompression_filter: str
        """

        self._custom_decompression_filter = custom_decompression_filter

    @property
    def forward_config_path(self):
        """Gets the forward_config_path of this Config.

        Determines whether a passive node should forward its configuration file path to its primary node during cron or sync-info commands   # noqa: E501

        :return: The forward_config_path of this Config.
        :rtype: bool
        """
        return self._forward_config_path

    @forward_config_path.setter
    def forward_config_path(self, forward_config_path):
        """Sets the forward_config_path of this Config.

        Determines whether a passive node should forward its configuration file path to its primary node during cron or sync-info commands   # noqa: E501

        :param forward_config_path: The forward_config_path of this Config.
        :type forward_config_path: bool
        """

        self._forward_config_path = forward_config_path

    @property
    def immediate_checkpoint(self):
        """Gets the immediate_checkpoint of this Config.

        Whether to request an immediate checkpoint at the start of a backup  # noqa: E501

        :return: The immediate_checkpoint of this Config.
        :rtype: bool
        """
        return self._immediate_checkpoint

    @immediate_checkpoint.setter
    def immediate_checkpoint(self, immediate_checkpoint):
        """Sets the immediate_checkpoint of this Config.

        Whether to request an immediate checkpoint at the start of a backup  # noqa: E501

        :param immediate_checkpoint: The immediate_checkpoint of this Config.
        :type immediate_checkpoint: bool
        """

        self._immediate_checkpoint = immediate_checkpoint

    @property
    def last_backup_maximum_age(self):
        """Gets the last_backup_maximum_age of this Config.

        A time frame that must contain the latest backup   # noqa: E501

        :return: The last_backup_maximum_age of this Config.
        :rtype: str
        """
        return self._last_backup_maximum_age

    @last_backup_maximum_age.setter
    def last_backup_maximum_age(self, last_backup_maximum_age):
        """Sets the last_backup_maximum_age of this Config.

        A time frame that must contain the latest backup   # noqa: E501

        :param last_backup_maximum_age: The last_backup_maximum_age of this Config.
        :type last_backup_maximum_age: str
        """

        self._last_backup_maximum_age = last_backup_maximum_age

    @property
    def last_backup_minimum_size(self):
        """Gets the last_backup_minimum_size of this Config.

        The lower limit to the acceptable size of the latest successful backup   # noqa: E501

        :return: The last_backup_minimum_size of this Config.
        :rtype: int
        """
        return self._last_backup_minimum_size

    @last_backup_minimum_size.setter
    def last_backup_minimum_size(self, last_backup_minimum_size):
        """Sets the last_backup_minimum_size of this Config.

        The lower limit to the acceptable size of the latest successful backup   # noqa: E501

        :param last_backup_minimum_size: The last_backup_minimum_size of this Config.
        :type last_backup_minimum_size: int
        """

        self._last_backup_minimum_size = last_backup_minimum_size

    @property
    def last_wal_maximum_age(self):
        """Gets the last_wal_maximum_age of this Config.

        A time frame that must contain the latest WAL file archive   # noqa: E501

        :return: The last_wal_maximum_age of this Config.
        :rtype: str
        """
        return self._last_wal_maximum_age

    @last_wal_maximum_age.setter
    def last_wal_maximum_age(self, last_wal_maximum_age):
        """Sets the last_wal_maximum_age of this Config.

        A time frame that must contain the latest WAL file archive   # noqa: E501

        :param last_wal_maximum_age: The last_wal_maximum_age of this Config.
        :type last_wal_maximum_age: str
        """

        self._last_wal_maximum_age = last_wal_maximum_age

    @property
    def max_incoming_wals_queue(self):
        """Gets the max_incoming_wals_queue of this Config.

        Maximum number of WAL files in the incoming queue that are allowed before barman check returns an error   # noqa: E501

        :return: The max_incoming_wals_queue of this Config.
        :rtype: int
        """
        return self._max_incoming_wals_queue

    @max_incoming_wals_queue.setter
    def max_incoming_wals_queue(self, max_incoming_wals_queue):
        """Sets the max_incoming_wals_queue of this Config.

        Maximum number of WAL files in the incoming queue that are allowed before barman check returns an error   # noqa: E501

        :param max_incoming_wals_queue: The max_incoming_wals_queue of this Config.
        :type max_incoming_wals_queue: int
        """

        self._max_incoming_wals_queue = max_incoming_wals_queue

    @property
    def minimum_redundancy(self):
        """Gets the minimum_redundancy of this Config.

        Minimum number of backups to be retained  # noqa: E501

        :return: The minimum_redundancy of this Config.
        :rtype: int
        """
        return self._minimum_redundancy

    @minimum_redundancy.setter
    def minimum_redundancy(self, minimum_redundancy):
        """Sets the minimum_redundancy of this Config.

        Minimum number of backups to be retained  # noqa: E501

        :param minimum_redundancy: The minimum_redundancy of this Config.
        :type minimum_redundancy: int
        """

        self._minimum_redundancy = minimum_redundancy

    @property
    def network_compression(self):
        """Gets the network_compression of this Config.

        Enable data compression for network transfers  # noqa: E501

        :return: The network_compression of this Config.
        :rtype: bool
        """
        return self._network_compression

    @network_compression.setter
    def network_compression(self, network_compression):
        """Sets the network_compression of this Config.

        Enable data compression for network transfers  # noqa: E501

        :param network_compression: The network_compression of this Config.
        :type network_compression: bool
        """

        self._network_compression = network_compression

    @property
    def parallel_jobs(self):
        """Gets the parallel_jobs of this Config.

        How many parallel workers will copy files during a backup or recovery command   # noqa: E501

        :return: The parallel_jobs of this Config.
        :rtype: int
        """
        return self._parallel_jobs

    @parallel_jobs.setter
    def parallel_jobs(self, parallel_jobs):
        """Sets the parallel_jobs of this Config.

        How many parallel workers will copy files during a backup or recovery command   # noqa: E501

        :param parallel_jobs: The parallel_jobs of this Config.
        :type parallel_jobs: int
        """

        self._parallel_jobs = parallel_jobs

    @property
    def path_prefix(self):
        """Gets the path_prefix of this Config.

        One or more absolute paths, separated by colon, where Barman looks for executable files   # noqa: E501

        :return: The path_prefix of this Config.
        :rtype: str
        """
        return self._path_prefix

    @path_prefix.setter
    def path_prefix(self, path_prefix):
        """Sets the path_prefix of this Config.

        One or more absolute paths, separated by colon, where Barman looks for executable files   # noqa: E501

        :param path_prefix: The path_prefix of this Config.
        :type path_prefix: str
        """

        self._path_prefix = path_prefix

    @property
    def post_archive_retry_script(self):
        """Gets the post_archive_retry_script of this Config.

        Hook script launched after a WAL file is archived by maintenance  # noqa: E501

        :return: The post_archive_retry_script of this Config.
        :rtype: str
        """
        return self._post_archive_retry_script

    @post_archive_retry_script.setter
    def post_archive_retry_script(self, post_archive_retry_script):
        """Sets the post_archive_retry_script of this Config.

        Hook script launched after a WAL file is archived by maintenance  # noqa: E501

        :param post_archive_retry_script: The post_archive_retry_script of this Config.
        :type post_archive_retry_script: str
        """

        self._post_archive_retry_script = post_archive_retry_script

    @property
    def post_archive_script(self):
        """Gets the post_archive_script of this Config.

        Hook script launched after a WAL file is archived by maintenance, after `post_archive_retry_script`   # noqa: E501

        :return: The post_archive_script of this Config.
        :rtype: str
        """
        return self._post_archive_script

    @post_archive_script.setter
    def post_archive_script(self, post_archive_script):
        """Sets the post_archive_script of this Config.

        Hook script launched after a WAL file is archived by maintenance, after `post_archive_retry_script`   # noqa: E501

        :param post_archive_script: The post_archive_script of this Config.
        :type post_archive_script: str
        """

        self._post_archive_script = post_archive_script

    @property
    def post_backup_retry_script(self):
        """Gets the post_backup_retry_script of this Config.

        Hook script launched after a base backup  # noqa: E501

        :return: The post_backup_retry_script of this Config.
        :rtype: str
        """
        return self._post_backup_retry_script

    @post_backup_retry_script.setter
    def post_backup_retry_script(self, post_backup_retry_script):
        """Sets the post_backup_retry_script of this Config.

        Hook script launched after a base backup  # noqa: E501

        :param post_backup_retry_script: The post_backup_retry_script of this Config.
        :type post_backup_retry_script: str
        """

        self._post_backup_retry_script = post_backup_retry_script

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this Config.

        Hook script launched after a base backup, after `post_backup_retry_script`   # noqa: E501

        :return: The post_backup_script of this Config.
        :rtype: str
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this Config.

        Hook script launched after a base backup, after `post_backup_retry_script`   # noqa: E501

        :param post_backup_script: The post_backup_script of this Config.
        :type post_backup_script: str
        """

        self._post_backup_script = post_backup_script

    @property
    def post_delete_retry_script(self):
        """Gets the post_delete_retry_script of this Config.

        Hook script launched after the deletion of a backup  # noqa: E501

        :return: The post_delete_retry_script of this Config.
        :rtype: str
        """
        return self._post_delete_retry_script

    @post_delete_retry_script.setter
    def post_delete_retry_script(self, post_delete_retry_script):
        """Sets the post_delete_retry_script of this Config.

        Hook script launched after the deletion of a backup  # noqa: E501

        :param post_delete_retry_script: The post_delete_retry_script of this Config.
        :type post_delete_retry_script: str
        """

        self._post_delete_retry_script = post_delete_retry_script

    @property
    def post_delete_script(self):
        """Gets the post_delete_script of this Config.

        Hook script launched after the deletion of a backup, after `post_delete_retry_script`   # noqa: E501

        :return: The post_delete_script of this Config.
        :rtype: str
        """
        return self._post_delete_script

    @post_delete_script.setter
    def post_delete_script(self, post_delete_script):
        """Sets the post_delete_script of this Config.

        Hook script launched after the deletion of a backup, after `post_delete_retry_script`   # noqa: E501

        :param post_delete_script: The post_delete_script of this Config.
        :type post_delete_script: str
        """

        self._post_delete_script = post_delete_script

    @property
    def post_recovery_retry_script(self):
        """Gets the post_recovery_retry_script of this Config.

        Hook script launched after a recovery   # noqa: E501

        :return: The post_recovery_retry_script of this Config.
        :rtype: str
        """
        return self._post_recovery_retry_script

    @post_recovery_retry_script.setter
    def post_recovery_retry_script(self, post_recovery_retry_script):
        """Sets the post_recovery_retry_script of this Config.

        Hook script launched after a recovery   # noqa: E501

        :param post_recovery_retry_script: The post_recovery_retry_script of this Config.
        :type post_recovery_retry_script: str
        """

        self._post_recovery_retry_script = post_recovery_retry_script

    @property
    def post_recovery_script(self):
        """Gets the post_recovery_script of this Config.

        Hook script launched after a recovery, after `post_recovery_retry_script`   # noqa: E501

        :return: The post_recovery_script of this Config.
        :rtype: str
        """
        return self._post_recovery_script

    @post_recovery_script.setter
    def post_recovery_script(self, post_recovery_script):
        """Sets the post_recovery_script of this Config.

        Hook script launched after a recovery, after `post_recovery_retry_script`   # noqa: E501

        :param post_recovery_script: The post_recovery_script of this Config.
        :type post_recovery_script: str
        """

        self._post_recovery_script = post_recovery_script

    @property
    def post_wal_delete_retry_script(self):
        """Gets the post_wal_delete_retry_script of this Config.

        Hook script launched after the deletion of a WAL file  # noqa: E501

        :return: The post_wal_delete_retry_script of this Config.
        :rtype: str
        """
        return self._post_wal_delete_retry_script

    @post_wal_delete_retry_script.setter
    def post_wal_delete_retry_script(self, post_wal_delete_retry_script):
        """Sets the post_wal_delete_retry_script of this Config.

        Hook script launched after the deletion of a WAL file  # noqa: E501

        :param post_wal_delete_retry_script: The post_wal_delete_retry_script of this Config.
        :type post_wal_delete_retry_script: str
        """

        self._post_wal_delete_retry_script = post_wal_delete_retry_script

    @property
    def post_wal_delete_script(self):
        """Gets the post_wal_delete_script of this Config.

        Hook script launched after the deletion of a WAL file, after post_wal_delete_retry_script`   # noqa: E501

        :return: The post_wal_delete_script of this Config.
        :rtype: str
        """
        return self._post_wal_delete_script

    @post_wal_delete_script.setter
    def post_wal_delete_script(self, post_wal_delete_script):
        """Sets the post_wal_delete_script of this Config.

        Hook script launched after the deletion of a WAL file, after post_wal_delete_retry_script`   # noqa: E501

        :param post_wal_delete_script: The post_wal_delete_script of this Config.
        :type post_wal_delete_script: str
        """

        self._post_wal_delete_script = post_wal_delete_script

    @property
    def pre_archive_retry_script(self):
        """Gets the pre_archive_retry_script of this Config.

        Hook script launched before a WAL file is archived by maintenance, after `pre_archive_script`   # noqa: E501

        :return: The pre_archive_retry_script of this Config.
        :rtype: str
        """
        return self._pre_archive_retry_script

    @pre_archive_retry_script.setter
    def pre_archive_retry_script(self, pre_archive_retry_script):
        """Sets the pre_archive_retry_script of this Config.

        Hook script launched before a WAL file is archived by maintenance, after `pre_archive_script`   # noqa: E501

        :param pre_archive_retry_script: The pre_archive_retry_script of this Config.
        :type pre_archive_retry_script: str
        """

        self._pre_archive_retry_script = pre_archive_retry_script

    @property
    def pre_archive_script(self):
        """Gets the pre_archive_script of this Config.

        Hook script launched before a WAL file is archived by maintenance  # noqa: E501

        :return: The pre_archive_script of this Config.
        :rtype: str
        """
        return self._pre_archive_script

    @pre_archive_script.setter
    def pre_archive_script(self, pre_archive_script):
        """Sets the pre_archive_script of this Config.

        Hook script launched before a WAL file is archived by maintenance  # noqa: E501

        :param pre_archive_script: The pre_archive_script of this Config.
        :type pre_archive_script: str
        """

        self._pre_archive_script = pre_archive_script

    @property
    def pre_backup_retry_script(self):
        """Gets the pre_backup_retry_script of this Config.

        Hook script launched before a base backup, after `pre_backup_script`  # noqa: E501

        :return: The pre_backup_retry_script of this Config.
        :rtype: str
        """
        return self._pre_backup_retry_script

    @pre_backup_retry_script.setter
    def pre_backup_retry_script(self, pre_backup_retry_script):
        """Sets the pre_backup_retry_script of this Config.

        Hook script launched before a base backup, after `pre_backup_script`  # noqa: E501

        :param pre_backup_retry_script: The pre_backup_retry_script of this Config.
        :type pre_backup_retry_script: str
        """

        self._pre_backup_retry_script = pre_backup_retry_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this Config.

        Hook script launched before a base backup  # noqa: E501

        :return: The pre_backup_script of this Config.
        :rtype: str
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this Config.

        Hook script launched before a base backup  # noqa: E501

        :param pre_backup_script: The pre_backup_script of this Config.
        :type pre_backup_script: str
        """

        self._pre_backup_script = pre_backup_script

    @property
    def pre_delete_retry_script(self):
        """Gets the pre_delete_retry_script of this Config.

        Hook script launched before the deletion of a backup, after `pre_delete_script`   # noqa: E501

        :return: The pre_delete_retry_script of this Config.
        :rtype: str
        """
        return self._pre_delete_retry_script

    @pre_delete_retry_script.setter
    def pre_delete_retry_script(self, pre_delete_retry_script):
        """Sets the pre_delete_retry_script of this Config.

        Hook script launched before the deletion of a backup, after `pre_delete_script`   # noqa: E501

        :param pre_delete_retry_script: The pre_delete_retry_script of this Config.
        :type pre_delete_retry_script: str
        """

        self._pre_delete_retry_script = pre_delete_retry_script

    @property
    def pre_delete_script(self):
        """Gets the pre_delete_script of this Config.

        Hook script launched before the deletion of a backup  # noqa: E501

        :return: The pre_delete_script of this Config.
        :rtype: str
        """
        return self._pre_delete_script

    @pre_delete_script.setter
    def pre_delete_script(self, pre_delete_script):
        """Sets the pre_delete_script of this Config.

        Hook script launched before the deletion of a backup  # noqa: E501

        :param pre_delete_script: The pre_delete_script of this Config.
        :type pre_delete_script: str
        """

        self._pre_delete_script = pre_delete_script

    @property
    def pre_recovery_retry_script(self):
        """Gets the pre_recovery_retry_script of this Config.

        Hook script launched before a recovery, after `pre_recovery_script`  # noqa: E501

        :return: The pre_recovery_retry_script of this Config.
        :rtype: str
        """
        return self._pre_recovery_retry_script

    @pre_recovery_retry_script.setter
    def pre_recovery_retry_script(self, pre_recovery_retry_script):
        """Sets the pre_recovery_retry_script of this Config.

        Hook script launched before a recovery, after `pre_recovery_script`  # noqa: E501

        :param pre_recovery_retry_script: The pre_recovery_retry_script of this Config.
        :type pre_recovery_retry_script: str
        """

        self._pre_recovery_retry_script = pre_recovery_retry_script

    @property
    def pre_recovery_script(self):
        """Gets the pre_recovery_script of this Config.

        Hook script launched before a recovery  # noqa: E501

        :return: The pre_recovery_script of this Config.
        :rtype: str
        """
        return self._pre_recovery_script

    @pre_recovery_script.setter
    def pre_recovery_script(self, pre_recovery_script):
        """Sets the pre_recovery_script of this Config.

        Hook script launched before a recovery  # noqa: E501

        :param pre_recovery_script: The pre_recovery_script of this Config.
        :type pre_recovery_script: str
        """

        self._pre_recovery_script = pre_recovery_script

    @property
    def pre_wal_delete_retry_script(self):
        """Gets the pre_wal_delete_retry_script of this Config.

        Hook script launched before the deletion of a WAL file, after `pre_wal_delete_script`   # noqa: E501

        :return: The pre_wal_delete_retry_script of this Config.
        :rtype: str
        """
        return self._pre_wal_delete_retry_script

    @pre_wal_delete_retry_script.setter
    def pre_wal_delete_retry_script(self, pre_wal_delete_retry_script):
        """Sets the pre_wal_delete_retry_script of this Config.

        Hook script launched before the deletion of a WAL file, after `pre_wal_delete_script`   # noqa: E501

        :param pre_wal_delete_retry_script: The pre_wal_delete_retry_script of this Config.
        :type pre_wal_delete_retry_script: str
        """

        self._pre_wal_delete_retry_script = pre_wal_delete_retry_script

    @property
    def pre_wal_delete_script(self):
        """Gets the pre_wal_delete_script of this Config.

        Hook script launched before the deletion of a WAL file  # noqa: E501

        :return: The pre_wal_delete_script of this Config.
        :rtype: str
        """
        return self._pre_wal_delete_script

    @pre_wal_delete_script.setter
    def pre_wal_delete_script(self, pre_wal_delete_script):
        """Sets the pre_wal_delete_script of this Config.

        Hook script launched before the deletion of a WAL file  # noqa: E501

        :param pre_wal_delete_script: The pre_wal_delete_script of this Config.
        :type pre_wal_delete_script: str
        """

        self._pre_wal_delete_script = pre_wal_delete_script

    @property
    def primary_ssh_command(self):
        """Gets the primary_ssh_command of this Config.

        Command used by a passive Barman server to login to the primary Barman server via ssh   # noqa: E501

        :return: The primary_ssh_command of this Config.
        :rtype: str
        """
        return self._primary_ssh_command

    @primary_ssh_command.setter
    def primary_ssh_command(self, primary_ssh_command):
        """Sets the primary_ssh_command of this Config.

        Command used by a passive Barman server to login to the primary Barman server via ssh   # noqa: E501

        :param primary_ssh_command: The primary_ssh_command of this Config.
        :type primary_ssh_command: str
        """

        self._primary_ssh_command = primary_ssh_command

    @property
    def recovery_options(self):
        """Gets the recovery_options of this Config.

        Options for recovery operations  # noqa: E501

        :return: The recovery_options of this Config.
        :rtype: str
        """
        return self._recovery_options

    @recovery_options.setter
    def recovery_options(self, recovery_options):
        """Sets the recovery_options of this Config.

        Options for recovery operations  # noqa: E501

        :param recovery_options: The recovery_options of this Config.
        :type recovery_options: str
        """

        self._recovery_options = recovery_options

    @property
    def retention_policy(self):
        """Gets the retention_policy of this Config.

        Policy for retention of periodic backups and archive logs  # noqa: E501

        :return: The retention_policy of this Config.
        :rtype: str
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this Config.

        Policy for retention of periodic backups and archive logs  # noqa: E501

        :param retention_policy: The retention_policy of this Config.
        :type retention_policy: str
        """

        self._retention_policy = retention_policy

    @property
    def retention_policy_mode(self):
        """Gets the retention_policy_mode of this Config.

        Mode which defines how retention policies are applied  # noqa: E501

        :return: The retention_policy_mode of this Config.
        :rtype: str
        """
        return self._retention_policy_mode

    @retention_policy_mode.setter
    def retention_policy_mode(self, retention_policy_mode):
        """Sets the retention_policy_mode of this Config.

        Mode which defines how retention policies are applied  # noqa: E501

        :param retention_policy_mode: The retention_policy_mode of this Config.
        :type retention_policy_mode: str
        """

        self._retention_policy_mode = retention_policy_mode

    @property
    def reuse_backup(self):
        """Gets the reuse_backup of this Config.

        Defines how incremental backup should be applied - one of `copy`, `link` or `off`   # noqa: E501

        :return: The reuse_backup of this Config.
        :rtype: str
        """
        return self._reuse_backup

    @reuse_backup.setter
    def reuse_backup(self, reuse_backup):
        """Sets the reuse_backup of this Config.

        Defines how incremental backup should be applied - one of `copy`, `link` or `off`   # noqa: E501

        :param reuse_backup: The reuse_backup of this Config.
        :type reuse_backup: str
        """

        self._reuse_backup = reuse_backup

    @property
    def slot_name(self):
        """Gets the slot_name of this Config.

        Physical replication slot to be used by the `receive-wal` command  # noqa: E501

        :return: The slot_name of this Config.
        :rtype: str
        """
        return self._slot_name

    @slot_name.setter
    def slot_name(self, slot_name):
        """Sets the slot_name of this Config.

        Physical replication slot to be used by the `receive-wal` command  # noqa: E501

        :param slot_name: The slot_name of this Config.
        :type slot_name: str
        """

        self._slot_name = slot_name

    @property
    def streaming_archiver(self):
        """Gets the streaming_archiver of this Config.

        Whether to use PostgreSQL's streaming protocol to receive transaction logs from a server   # noqa: E501

        :return: The streaming_archiver of this Config.
        :rtype: bool
        """
        return self._streaming_archiver

    @streaming_archiver.setter
    def streaming_archiver(self, streaming_archiver):
        """Sets the streaming_archiver of this Config.

        Whether to use PostgreSQL's streaming protocol to receive transaction logs from a server   # noqa: E501

        :param streaming_archiver: The streaming_archiver of this Config.
        :type streaming_archiver: bool
        """

        self._streaming_archiver = streaming_archiver

    @property
    def streaming_archiver_batch_size(self):
        """Gets the streaming_archiver_batch_size of this Config.

        The maximum number of streamed WAL files to be archived by Barman in a single run   # noqa: E501

        :return: The streaming_archiver_batch_size of this Config.
        :rtype: int
        """
        return self._streaming_archiver_batch_size

    @streaming_archiver_batch_size.setter
    def streaming_archiver_batch_size(self, streaming_archiver_batch_size):
        """Sets the streaming_archiver_batch_size of this Config.

        The maximum number of streamed WAL files to be archived by Barman in a single run   # noqa: E501

        :param streaming_archiver_batch_size: The streaming_archiver_batch_size of this Config.
        :type streaming_archiver_batch_size: int
        """

        self._streaming_archiver_batch_size = streaming_archiver_batch_size

    @property
    def streaming_archiver_name(self):
        """Gets the streaming_archiver_name of this Config.

        Identifier to be used as `application_name` by the `receive-wal` command   # noqa: E501

        :return: The streaming_archiver_name of this Config.
        :rtype: str
        """
        return self._streaming_archiver_name

    @streaming_archiver_name.setter
    def streaming_archiver_name(self, streaming_archiver_name):
        """Sets the streaming_archiver_name of this Config.

        Identifier to be used as `application_name` by the `receive-wal` command   # noqa: E501

        :param streaming_archiver_name: The streaming_archiver_name of this Config.
        :type streaming_archiver_name: str
        """

        self._streaming_archiver_name = streaming_archiver_name

    @property
    def streaming_backup_name(self):
        """Gets the streaming_backup_name of this Config.

        Identifier to be used as `application_name` by the `pg_basebackup` command   # noqa: E501

        :return: The streaming_backup_name of this Config.
        :rtype: str
        """
        return self._streaming_backup_name

    @streaming_backup_name.setter
    def streaming_backup_name(self, streaming_backup_name):
        """Sets the streaming_backup_name of this Config.

        Identifier to be used as `application_name` by the `pg_basebackup` command   # noqa: E501

        :param streaming_backup_name: The streaming_backup_name of this Config.
        :type streaming_backup_name: str
        """

        self._streaming_backup_name = streaming_backup_name

    @property
    def tablespace_bandwidth_limit(self):
        """Gets the tablespace_bandwidth_limit of this Config.

        Maximum transfer rate in kilobytes per second when copying a specific tablespace - specified as a comma separated list of TABLESPACE:BWLIMIT pairs   # noqa: E501

        :return: The tablespace_bandwidth_limit of this Config.
        :rtype: str
        """
        return self._tablespace_bandwidth_limit

    @tablespace_bandwidth_limit.setter
    def tablespace_bandwidth_limit(self, tablespace_bandwidth_limit):
        """Sets the tablespace_bandwidth_limit of this Config.

        Maximum transfer rate in kilobytes per second when copying a specific tablespace - specified as a comma separated list of TABLESPACE:BWLIMIT pairs   # noqa: E501

        :param tablespace_bandwidth_limit: The tablespace_bandwidth_limit of this Config.
        :type tablespace_bandwidth_limit: str
        """

        self._tablespace_bandwidth_limit = tablespace_bandwidth_limit

    @property
    def wal_retention_policy(self):
        """Gets the wal_retention_policy of this Config.

        Policy for retention of archive logs (WAL files)  # noqa: E501

        :return: The wal_retention_policy of this Config.
        :rtype: str
        """
        return self._wal_retention_policy

    @wal_retention_policy.setter
    def wal_retention_policy(self, wal_retention_policy):
        """Sets the wal_retention_policy of this Config.

        Policy for retention of archive logs (WAL files)  # noqa: E501

        :param wal_retention_policy: The wal_retention_policy of this Config.
        :type wal_retention_policy: str
        """

        self._wal_retention_policy = wal_retention_policy
