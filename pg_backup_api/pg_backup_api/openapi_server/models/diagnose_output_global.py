# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2021-2022
#
# This file is part of Postgres Backup API.
#
# Postgres Backup API is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Postgres Backup API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Postgres Backup API.  If not, see <http://www.gnu.org/licenses/>.

# This file was autogenerated by OpenAPI Generator.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pg_backup_api.openapi_server.models.base_model_ import Model
from pg_backup_api.openapi_server.models.global_config import GlobalConfig
from pg_backup_api.openapi_server.models.system_info import SystemInfo
from pg_backup_api.openapi_server import util

from pg_backup_api.openapi_server.models.global_config import GlobalConfig  # noqa: E501
from pg_backup_api.openapi_server.models.system_info import SystemInfo  # noqa: E501


class DiagnoseOutputGlobal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config=None, system_info=None):  # noqa: E501
        """DiagnoseOutputGlobal - a model defined in OpenAPI

        :param config: The config of this DiagnoseOutputGlobal.  # noqa: E501
        :type config: GlobalConfig
        :param system_info: The system_info of this DiagnoseOutputGlobal.  # noqa: E501
        :type system_info: SystemInfo
        """
        self.openapi_types = {"config": GlobalConfig, "system_info": SystemInfo}

        self.attribute_map = {"config": "config", "system_info": "system_info"}

        self._config = config
        self._system_info = system_info

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiagnoseOutput_global of this DiagnoseOutputGlobal.  # noqa: E501
        :rtype: DiagnoseOutputGlobal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this DiagnoseOutputGlobal.


        :return: The config of this DiagnoseOutputGlobal.
        :rtype: GlobalConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DiagnoseOutputGlobal.


        :param config: The config of this DiagnoseOutputGlobal.
        :type config: GlobalConfig
        """

        self._config = config

    @property
    def system_info(self):
        """Gets the system_info of this DiagnoseOutputGlobal.


        :return: The system_info of this DiagnoseOutputGlobal.
        :rtype: SystemInfo
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this DiagnoseOutputGlobal.


        :param system_info: The system_info of this DiagnoseOutputGlobal.
        :type system_info: SystemInfo
        """
        if system_info is None:
            raise ValueError(
                "Invalid value for `system_info`, must not be `None`"
            )  # noqa: E501

        self._system_info = system_info
