# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2013-2021
#
# This file is part of Postgres Backup API.
#
# Postgres Backup API is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Postgres Backup API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Postgres Backup API.  If not, see <http://www.gnu.org/licenses/>.

# This file was autogenerated by OpenAPI Generator.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pg_backup_api.openapi_server.models.base_model_ import Model
import re
from pg_backup_api.openapi_server import util

import re  # noqa: E501


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        archive_command=None,
        archive_mode=None,
        archive_timeout=None,
        archived_count=None,
        checkpoint_timeout=None,
        config_file=None,
        connection_error=None,
        current_archived_wals_per_second=None,
        current_lsn=None,
        current_size=None,
        current_xlog=None,
        data_checksums=None,
        data_directory=None,
        failed_count=None,
        has_backup_privileges=None,
        hba_file=None,
        hot_standby=None,
        ident_file=None,
        is_archiving=None,
        is_in_recovery=None,
        is_superuser=None,
        last_archived_time=None,
        last_archived_wal=None,
        last_failed_time=None,
        last_failed_wal=None,
        max_replication_slots=None,
        max_wal_senders=None,
        pgespresso_installed=None,
        postgresql_systemid=None,
        replication_slot=None,
        replication_slot_support=None,
        server_txt_version=None,
        stats_reset=None,
        synchronous_standby_names=None,
        wal_compression=None,
        wal_keep_size=None,
        wal_level=None,
        xlog_segment_size=None,
    ):  # noqa: E501
        """Status - a model defined in OpenAPI

        :param archive_command: The archive_command of this Status.  # noqa: E501
        :type archive_command: str
        :param archive_mode: The archive_mode of this Status.  # noqa: E501
        :type archive_mode: str
        :param archive_timeout: The archive_timeout of this Status.  # noqa: E501
        :type archive_timeout: int
        :param archived_count: The archived_count of this Status.  # noqa: E501
        :type archived_count: int
        :param checkpoint_timeout: The checkpoint_timeout of this Status.  # noqa: E501
        :type checkpoint_timeout: int
        :param config_file: The config_file of this Status.  # noqa: E501
        :type config_file: str
        :param connection_error: The connection_error of this Status.  # noqa: E501
        :type connection_error: str
        :param current_archived_wals_per_second: The current_archived_wals_per_second of this Status.  # noqa: E501
        :type current_archived_wals_per_second: float
        :param current_lsn: The current_lsn of this Status.  # noqa: E501
        :type current_lsn: str
        :param current_size: The current_size of this Status.  # noqa: E501
        :type current_size: float
        :param current_xlog: The current_xlog of this Status.  # noqa: E501
        :type current_xlog: str
        :param data_checksums: The data_checksums of this Status.  # noqa: E501
        :type data_checksums: bool
        :param data_directory: The data_directory of this Status.  # noqa: E501
        :type data_directory: str
        :param failed_count: The failed_count of this Status.  # noqa: E501
        :type failed_count: int
        :param has_backup_privileges: The has_backup_privileges of this Status.  # noqa: E501
        :type has_backup_privileges: bool
        :param hba_file: The hba_file of this Status.  # noqa: E501
        :type hba_file: str
        :param hot_standby: The hot_standby of this Status.  # noqa: E501
        :type hot_standby: str
        :param ident_file: The ident_file of this Status.  # noqa: E501
        :type ident_file: str
        :param is_archiving: The is_archiving of this Status.  # noqa: E501
        :type is_archiving: bool
        :param is_in_recovery: The is_in_recovery of this Status.  # noqa: E501
        :type is_in_recovery: bool
        :param is_superuser: The is_superuser of this Status.  # noqa: E501
        :type is_superuser: bool
        :param last_archived_time: The last_archived_time of this Status.  # noqa: E501
        :type last_archived_time: str
        :param last_archived_wal: The last_archived_wal of this Status.  # noqa: E501
        :type last_archived_wal: str
        :param last_failed_time: The last_failed_time of this Status.  # noqa: E501
        :type last_failed_time: str
        :param last_failed_wal: The last_failed_wal of this Status.  # noqa: E501
        :type last_failed_wal: str
        :param max_replication_slots: The max_replication_slots of this Status.  # noqa: E501
        :type max_replication_slots: str
        :param max_wal_senders: The max_wal_senders of this Status.  # noqa: E501
        :type max_wal_senders: str
        :param pgespresso_installed: The pgespresso_installed of this Status.  # noqa: E501
        :type pgespresso_installed: bool
        :param postgresql_systemid: The postgresql_systemid of this Status.  # noqa: E501
        :type postgresql_systemid: str
        :param replication_slot: The replication_slot of this Status.  # noqa: E501
        :type replication_slot: List[object]
        :param replication_slot_support: The replication_slot_support of this Status.  # noqa: E501
        :type replication_slot_support: bool
        :param server_txt_version: The server_txt_version of this Status.  # noqa: E501
        :type server_txt_version: str
        :param stats_reset: The stats_reset of this Status.  # noqa: E501
        :type stats_reset: str
        :param synchronous_standby_names: The synchronous_standby_names of this Status.  # noqa: E501
        :type synchronous_standby_names: List[str]
        :param wal_compression: The wal_compression of this Status.  # noqa: E501
        :type wal_compression: str
        :param wal_keep_size: The wal_keep_size of this Status.  # noqa: E501
        :type wal_keep_size: str
        :param wal_level: The wal_level of this Status.  # noqa: E501
        :type wal_level: str
        :param xlog_segment_size: The xlog_segment_size of this Status.  # noqa: E501
        :type xlog_segment_size: int
        """
        self.openapi_types = {
            "archive_command": str,
            "archive_mode": str,
            "archive_timeout": int,
            "archived_count": int,
            "checkpoint_timeout": int,
            "config_file": str,
            "connection_error": str,
            "current_archived_wals_per_second": float,
            "current_lsn": str,
            "current_size": float,
            "current_xlog": str,
            "data_checksums": bool,
            "data_directory": str,
            "failed_count": int,
            "has_backup_privileges": bool,
            "hba_file": str,
            "hot_standby": str,
            "ident_file": str,
            "is_archiving": bool,
            "is_in_recovery": bool,
            "is_superuser": bool,
            "last_archived_time": str,
            "last_archived_wal": str,
            "last_failed_time": str,
            "last_failed_wal": str,
            "max_replication_slots": str,
            "max_wal_senders": str,
            "pgespresso_installed": bool,
            "postgresql_systemid": str,
            "replication_slot": List[object],
            "replication_slot_support": bool,
            "server_txt_version": str,
            "stats_reset": str,
            "synchronous_standby_names": List[str],
            "wal_compression": str,
            "wal_keep_size": str,
            "wal_level": str,
            "xlog_segment_size": int,
        }

        self.attribute_map = {
            "archive_command": "archive_command",
            "archive_mode": "archive_mode",
            "archive_timeout": "archive_timeout",
            "archived_count": "archived_count",
            "checkpoint_timeout": "checkpoint_timeout",
            "config_file": "config_file",
            "connection_error": "connection_error",
            "current_archived_wals_per_second": "current_archived_wals_per_second",
            "current_lsn": "current_lsn",
            "current_size": "current_size",
            "current_xlog": "current_xlog",
            "data_checksums": "data_checksums",
            "data_directory": "data_directory",
            "failed_count": "failed_count",
            "has_backup_privileges": "has_backup_privileges",
            "hba_file": "hba_file",
            "hot_standby": "hot_standby",
            "ident_file": "ident_file",
            "is_archiving": "is_archiving",
            "is_in_recovery": "is_in_recovery",
            "is_superuser": "is_superuser",
            "last_archived_time": "last_archived_time",
            "last_archived_wal": "last_archived_wal",
            "last_failed_time": "last_failed_time",
            "last_failed_wal": "last_failed_wal",
            "max_replication_slots": "max_replication_slots",
            "max_wal_senders": "max_wal_senders",
            "pgespresso_installed": "pgespresso_installed",
            "postgresql_systemid": "postgresql_systemid",
            "replication_slot": "replication_slot",
            "replication_slot_support": "replication_slot_support",
            "server_txt_version": "server_txt_version",
            "stats_reset": "stats_reset",
            "synchronous_standby_names": "synchronous_standby_names",
            "wal_compression": "wal_compression",
            "wal_keep_size": "wal_keep_size",
            "wal_level": "wal_level",
            "xlog_segment_size": "xlog_segment_size",
        }

        self._archive_command = archive_command
        self._archive_mode = archive_mode
        self._archive_timeout = archive_timeout
        self._archived_count = archived_count
        self._checkpoint_timeout = checkpoint_timeout
        self._config_file = config_file
        self._connection_error = connection_error
        self._current_archived_wals_per_second = current_archived_wals_per_second
        self._current_lsn = current_lsn
        self._current_size = current_size
        self._current_xlog = current_xlog
        self._data_checksums = data_checksums
        self._data_directory = data_directory
        self._failed_count = failed_count
        self._has_backup_privileges = has_backup_privileges
        self._hba_file = hba_file
        self._hot_standby = hot_standby
        self._ident_file = ident_file
        self._is_archiving = is_archiving
        self._is_in_recovery = is_in_recovery
        self._is_superuser = is_superuser
        self._last_archived_time = last_archived_time
        self._last_archived_wal = last_archived_wal
        self._last_failed_time = last_failed_time
        self._last_failed_wal = last_failed_wal
        self._max_replication_slots = max_replication_slots
        self._max_wal_senders = max_wal_senders
        self._pgespresso_installed = pgespresso_installed
        self._postgresql_systemid = postgresql_systemid
        self._replication_slot = replication_slot
        self._replication_slot_support = replication_slot_support
        self._server_txt_version = server_txt_version
        self._stats_reset = stats_reset
        self._synchronous_standby_names = synchronous_standby_names
        self._wal_compression = wal_compression
        self._wal_keep_size = wal_keep_size
        self._wal_level = wal_level
        self._xlog_segment_size = xlog_segment_size

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_command(self):
        """Gets the archive_command of this Status.

        The current value of archive_command on the PostgreSQL server  # noqa: E501

        :return: The archive_command of this Status.
        :rtype: str
        """
        return self._archive_command

    @archive_command.setter
    def archive_command(self, archive_command):
        """Sets the archive_command of this Status.

        The current value of archive_command on the PostgreSQL server  # noqa: E501

        :param archive_command: The archive_command of this Status.
        :type archive_command: str
        """

        self._archive_command = archive_command

    @property
    def archive_mode(self):
        """Gets the archive_mode of this Status.

        The current value of archive_mode on the PostgreSQL server  # noqa: E501

        :return: The archive_mode of this Status.
        :rtype: str
        """
        return self._archive_mode

    @archive_mode.setter
    def archive_mode(self, archive_mode):
        """Sets the archive_mode of this Status.

        The current value of archive_mode on the PostgreSQL server  # noqa: E501

        :param archive_mode: The archive_mode of this Status.
        :type archive_mode: str
        """

        self._archive_mode = archive_mode

    @property
    def archive_timeout(self):
        """Gets the archive_timeout of this Status.

        The current value of archive_timeout (in seconds) on the PostgreSQL server   # noqa: E501

        :return: The archive_timeout of this Status.
        :rtype: int
        """
        return self._archive_timeout

    @archive_timeout.setter
    def archive_timeout(self, archive_timeout):
        """Sets the archive_timeout of this Status.

        The current value of archive_timeout (in seconds) on the PostgreSQL server   # noqa: E501

        :param archive_timeout: The archive_timeout of this Status.
        :type archive_timeout: int
        """

        self._archive_timeout = archive_timeout

    @property
    def archived_count(self):
        """Gets the archived_count of this Status.

        The number of WAL files that have been successfully archived by the PostgreSQL server   # noqa: E501

        :return: The archived_count of this Status.
        :rtype: int
        """
        return self._archived_count

    @archived_count.setter
    def archived_count(self, archived_count):
        """Sets the archived_count of this Status.

        The number of WAL files that have been successfully archived by the PostgreSQL server   # noqa: E501

        :param archived_count: The archived_count of this Status.
        :type archived_count: int
        """

        self._archived_count = archived_count

    @property
    def checkpoint_timeout(self):
        """Gets the checkpoint_timeout of this Status.

        The current value of checkpoint_timeout (in seconds) on the PostgreSQL server   # noqa: E501

        :return: The checkpoint_timeout of this Status.
        :rtype: int
        """
        return self._checkpoint_timeout

    @checkpoint_timeout.setter
    def checkpoint_timeout(self, checkpoint_timeout):
        """Sets the checkpoint_timeout of this Status.

        The current value of checkpoint_timeout (in seconds) on the PostgreSQL server   # noqa: E501

        :param checkpoint_timeout: The checkpoint_timeout of this Status.
        :type checkpoint_timeout: int
        """

        self._checkpoint_timeout = checkpoint_timeout

    @property
    def config_file(self):
        """Gets the config_file of this Status.

        The current path to the `postgresql.conf` file of the PostgreSQL server   # noqa: E501

        :return: The config_file of this Status.
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file):
        """Sets the config_file of this Status.

        The current path to the `postgresql.conf` file of the PostgreSQL server   # noqa: E501

        :param config_file: The config_file of this Status.
        :type config_file: str
        """

        self._config_file = config_file

    @property
    def connection_error(self):
        """Gets the connection_error of this Status.

        Error message in the event that barman cannot connect to the PostgreSQL server   # noqa: E501

        :return: The connection_error of this Status.
        :rtype: str
        """
        return self._connection_error

    @connection_error.setter
    def connection_error(self, connection_error):
        """Sets the connection_error of this Status.

        Error message in the event that barman cannot connect to the PostgreSQL server   # noqa: E501

        :param connection_error: The connection_error of this Status.
        :type connection_error: str
        """

        self._connection_error = connection_error

    @property
    def current_archived_wals_per_second(self):
        """Gets the current_archived_wals_per_second of this Status.

        The WAL archive rate of the PostgreSQL server calculated over the time since the last stats reset   # noqa: E501

        :return: The current_archived_wals_per_second of this Status.
        :rtype: float
        """
        return self._current_archived_wals_per_second

    @current_archived_wals_per_second.setter
    def current_archived_wals_per_second(self, current_archived_wals_per_second):
        """Sets the current_archived_wals_per_second of this Status.

        The WAL archive rate of the PostgreSQL server calculated over the time since the last stats reset   # noqa: E501

        :param current_archived_wals_per_second: The current_archived_wals_per_second of this Status.
        :type current_archived_wals_per_second: float
        """

        self._current_archived_wals_per_second = current_archived_wals_per_second

    @property
    def current_lsn(self):
        """Gets the current_lsn of this Status.

        The current LSN of the PostgreSQL server  # noqa: E501

        :return: The current_lsn of this Status.
        :rtype: str
        """
        return self._current_lsn

    @current_lsn.setter
    def current_lsn(self, current_lsn):
        """Sets the current_lsn of this Status.

        The current LSN of the PostgreSQL server  # noqa: E501

        :param current_lsn: The current_lsn of this Status.
        :type current_lsn: str
        """

        self._current_lsn = current_lsn

    @property
    def current_size(self):
        """Gets the current_size of this Status.

        The total size of the PostgreSQL server in bytes  # noqa: E501

        :return: The current_size of this Status.
        :rtype: float
        """
        return self._current_size

    @current_size.setter
    def current_size(self, current_size):
        """Sets the current_size of this Status.

        The total size of the PostgreSQL server in bytes  # noqa: E501

        :param current_size: The current_size of this Status.
        :type current_size: float
        """

        self._current_size = current_size

    @property
    def current_xlog(self):
        """Gets the current_xlog of this Status.

        The current WAL of the PostgreSQL server  # noqa: E501

        :return: The current_xlog of this Status.
        :rtype: str
        """
        return self._current_xlog

    @current_xlog.setter
    def current_xlog(self, current_xlog):
        """Sets the current_xlog of this Status.

        The current WAL of the PostgreSQL server  # noqa: E501

        :param current_xlog: The current_xlog of this Status.
        :type current_xlog: str
        """

        self._current_xlog = current_xlog

    @property
    def data_checksums(self):
        """Gets the data_checksums of this Status.

        Whether data checksums are enabled for the PostgreSQL server  # noqa: E501

        :return: The data_checksums of this Status.
        :rtype: bool
        """
        return self._data_checksums

    @data_checksums.setter
    def data_checksums(self, data_checksums):
        """Sets the data_checksums of this Status.

        Whether data checksums are enabled for the PostgreSQL server  # noqa: E501

        :param data_checksums: The data_checksums of this Status.
        :type data_checksums: bool
        """

        self._data_checksums = data_checksums

    @property
    def data_directory(self):
        """Gets the data_directory of this Status.

        The current path to the PGDATA directory of the PostgreSQL server  # noqa: E501

        :return: The data_directory of this Status.
        :rtype: str
        """
        return self._data_directory

    @data_directory.setter
    def data_directory(self, data_directory):
        """Sets the data_directory of this Status.

        The current path to the PGDATA directory of the PostgreSQL server  # noqa: E501

        :param data_directory: The data_directory of this Status.
        :type data_directory: str
        """

        self._data_directory = data_directory

    @property
    def failed_count(self):
        """Gets the failed_count of this Status.

        The number of failed attempts for archiving WAL files by the PostgreSQL server   # noqa: E501

        :return: The failed_count of this Status.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this Status.

        The number of failed attempts for archiving WAL files by the PostgreSQL server   # noqa: E501

        :param failed_count: The failed_count of this Status.
        :type failed_count: int
        """

        self._failed_count = failed_count

    @property
    def has_backup_privileges(self):
        """Gets the has_backup_privileges of this Status.

        Whether the configured user has the PostgreSQL privileges required in order to take a backup   # noqa: E501

        :return: The has_backup_privileges of this Status.
        :rtype: bool
        """
        return self._has_backup_privileges

    @has_backup_privileges.setter
    def has_backup_privileges(self, has_backup_privileges):
        """Sets the has_backup_privileges of this Status.

        Whether the configured user has the PostgreSQL privileges required in order to take a backup   # noqa: E501

        :param has_backup_privileges: The has_backup_privileges of this Status.
        :type has_backup_privileges: bool
        """

        self._has_backup_privileges = has_backup_privileges

    @property
    def hba_file(self):
        """Gets the hba_file of this Status.

        The current path to the `pg_hba.conf` file of the PostgreSQL server  # noqa: E501

        :return: The hba_file of this Status.
        :rtype: str
        """
        return self._hba_file

    @hba_file.setter
    def hba_file(self, hba_file):
        """Sets the hba_file of this Status.

        The current path to the `pg_hba.conf` file of the PostgreSQL server  # noqa: E501

        :param hba_file: The hba_file of this Status.
        :type hba_file: str
        """

        self._hba_file = hba_file

    @property
    def hot_standby(self):
        """Gets the hot_standby of this Status.

        The current value of hot_standby on the PostgreSQL server  # noqa: E501

        :return: The hot_standby of this Status.
        :rtype: str
        """
        return self._hot_standby

    @hot_standby.setter
    def hot_standby(self, hot_standby):
        """Sets the hot_standby of this Status.

        The current value of hot_standby on the PostgreSQL server  # noqa: E501

        :param hot_standby: The hot_standby of this Status.
        :type hot_standby: str
        """

        self._hot_standby = hot_standby

    @property
    def ident_file(self):
        """Gets the ident_file of this Status.

        The current path to the `pg_ident.conf` file of the PostgreSQL server   # noqa: E501

        :return: The ident_file of this Status.
        :rtype: str
        """
        return self._ident_file

    @ident_file.setter
    def ident_file(self, ident_file):
        """Sets the ident_file of this Status.

        The current path to the `pg_ident.conf` file of the PostgreSQL server   # noqa: E501

        :param ident_file: The ident_file of this Status.
        :type ident_file: str
        """

        self._ident_file = ident_file

    @property
    def is_archiving(self):
        """Gets the is_archiving of this Status.

        Whether the PostgreSQL server is currently archiving WALs (as determined by Barman from the content of `pg_stat_archiver`)   # noqa: E501

        :return: The is_archiving of this Status.
        :rtype: bool
        """
        return self._is_archiving

    @is_archiving.setter
    def is_archiving(self, is_archiving):
        """Sets the is_archiving of this Status.

        Whether the PostgreSQL server is currently archiving WALs (as determined by Barman from the content of `pg_stat_archiver`)   # noqa: E501

        :param is_archiving: The is_archiving of this Status.
        :type is_archiving: bool
        """

        self._is_archiving = is_archiving

    @property
    def is_in_recovery(self):
        """Gets the is_in_recovery of this Status.

        Whether the PostgreSQL server is currently in recovery (as determined by Barman using `pg_is_in_recovery()`)   # noqa: E501

        :return: The is_in_recovery of this Status.
        :rtype: bool
        """
        return self._is_in_recovery

    @is_in_recovery.setter
    def is_in_recovery(self, is_in_recovery):
        """Sets the is_in_recovery of this Status.

        Whether the PostgreSQL server is currently in recovery (as determined by Barman using `pg_is_in_recovery()`)   # noqa: E501

        :param is_in_recovery: The is_in_recovery of this Status.
        :type is_in_recovery: bool
        """

        self._is_in_recovery = is_in_recovery

    @property
    def is_superuser(self):
        """Gets the is_superuser of this Status.

        Whether the configured user has superuser privileges  # noqa: E501

        :return: The is_superuser of this Status.
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this Status.

        Whether the configured user has superuser privileges  # noqa: E501

        :param is_superuser: The is_superuser of this Status.
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def last_archived_time(self):
        """Gets the last_archived_time of this Status.

        The time that a WAL was most recently archived by PostgreSQL (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :return: The last_archived_time of this Status.
        :rtype: str
        """
        return self._last_archived_time

    @last_archived_time.setter
    def last_archived_time(self, last_archived_time):
        """Sets the last_archived_time of this Status.

        The time that a WAL was most recently archived by PostgreSQL (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :param last_archived_time: The last_archived_time of this Status.
        :type last_archived_time: str
        """
        if last_archived_time is not None and not re.search(
            r"^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
            last_archived_time,
        ):  # noqa: E501
            msg = (
                "Invalid value for `last_archived_time`, must be a follow pattern or equal to "
                "`{}`, got `{}`.".format(
                    "^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
                    last_archived_time,
                )
            )  # noqa: W605
            raise ValueError(msg)  # noqa: E501

        self._last_archived_time = last_archived_time

    @property
    def last_archived_wal(self):
        """Gets the last_archived_wal of this Status.

        The WAL segment which was most recently archived by PostgreSQL  # noqa: E501

        :return: The last_archived_wal of this Status.
        :rtype: str
        """
        return self._last_archived_wal

    @last_archived_wal.setter
    def last_archived_wal(self, last_archived_wal):
        """Sets the last_archived_wal of this Status.

        The WAL segment which was most recently archived by PostgreSQL  # noqa: E501

        :param last_archived_wal: The last_archived_wal of this Status.
        :type last_archived_wal: str
        """

        self._last_archived_wal = last_archived_wal

    @property
    def last_failed_time(self):
        """Gets the last_failed_time of this Status.

        The time of the most recent WAL archive failure on the PostgreSQL server (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :return: The last_failed_time of this Status.
        :rtype: str
        """
        return self._last_failed_time

    @last_failed_time.setter
    def last_failed_time(self, last_failed_time):
        """Sets the last_failed_time of this Status.

        The time of the most recent WAL archive failure on the PostgreSQL server (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :param last_failed_time: The last_failed_time of this Status.
        :type last_failed_time: str
        """
        if last_failed_time is not None and not re.search(
            r"^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
            last_failed_time,
        ):  # noqa: E501
            msg = (
                "Invalid value for `last_failed_time`, must be a follow pattern or equal to "
                "`{}`, got `{}`.".format(
                    "^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
                    last_failed_time,
                )
            )  # noqa: W605
            raise ValueError(msg)  # noqa: E501

        self._last_failed_time = last_failed_time

    @property
    def last_failed_wal(self):
        """Gets the last_failed_wal of this Status.

        The WAL segment which was being archived during the most recent failed WAL archive attempt   # noqa: E501

        :return: The last_failed_wal of this Status.
        :rtype: str
        """
        return self._last_failed_wal

    @last_failed_wal.setter
    def last_failed_wal(self, last_failed_wal):
        """Sets the last_failed_wal of this Status.

        The WAL segment which was being archived during the most recent failed WAL archive attempt   # noqa: E501

        :param last_failed_wal: The last_failed_wal of this Status.
        :type last_failed_wal: str
        """

        self._last_failed_wal = last_failed_wal

    @property
    def max_replication_slots(self):
        """Gets the max_replication_slots of this Status.

        The current value of max_replication_slots on the PostgreSQL server  # noqa: E501

        :return: The max_replication_slots of this Status.
        :rtype: str
        """
        return self._max_replication_slots

    @max_replication_slots.setter
    def max_replication_slots(self, max_replication_slots):
        """Sets the max_replication_slots of this Status.

        The current value of max_replication_slots on the PostgreSQL server  # noqa: E501

        :param max_replication_slots: The max_replication_slots of this Status.
        :type max_replication_slots: str
        """

        self._max_replication_slots = max_replication_slots

    @property
    def max_wal_senders(self):
        """Gets the max_wal_senders of this Status.

        The current value of max_wal_senders on the PostgreSQL server  # noqa: E501

        :return: The max_wal_senders of this Status.
        :rtype: str
        """
        return self._max_wal_senders

    @max_wal_senders.setter
    def max_wal_senders(self, max_wal_senders):
        """Sets the max_wal_senders of this Status.

        The current value of max_wal_senders on the PostgreSQL server  # noqa: E501

        :param max_wal_senders: The max_wal_senders of this Status.
        :type max_wal_senders: str
        """

        self._max_wal_senders = max_wal_senders

    @property
    def pgespresso_installed(self):
        """Gets the pgespresso_installed of this Status.

        Whether the PostgreSQL server has Pgespresso installed  # noqa: E501

        :return: The pgespresso_installed of this Status.
        :rtype: bool
        """
        return self._pgespresso_installed

    @pgespresso_installed.setter
    def pgespresso_installed(self, pgespresso_installed):
        """Sets the pgespresso_installed of this Status.

        Whether the PostgreSQL server has Pgespresso installed  # noqa: E501

        :param pgespresso_installed: The pgespresso_installed of this Status.
        :type pgespresso_installed: bool
        """

        self._pgespresso_installed = pgespresso_installed

    @property
    def postgresql_systemid(self):
        """Gets the postgresql_systemid of this Status.

        The system identifier of the PostgreSQL server  # noqa: E501

        :return: The postgresql_systemid of this Status.
        :rtype: str
        """
        return self._postgresql_systemid

    @postgresql_systemid.setter
    def postgresql_systemid(self, postgresql_systemid):
        """Sets the postgresql_systemid of this Status.

        The system identifier of the PostgreSQL server  # noqa: E501

        :param postgresql_systemid: The postgresql_systemid of this Status.
        :type postgresql_systemid: str
        """

        self._postgresql_systemid = postgresql_systemid

    @property
    def replication_slot(self):
        """Gets the replication_slot of this Status.

        Details of the replication slot being used by Barman on this PostgreSQL server in the form of an ordered array. The first item MUST be a string containing the slot_name. The second item MUST be a boolean reflecting the active state of the replication slot. The third item MUST be a string containing the LSN of the oldest WAL which still might be required by the consumer of this slot.   # noqa: E501

        :return: The replication_slot of this Status.
        :rtype: List[object]
        """
        return self._replication_slot

    @replication_slot.setter
    def replication_slot(self, replication_slot):
        """Sets the replication_slot of this Status.

        Details of the replication slot being used by Barman on this PostgreSQL server in the form of an ordered array. The first item MUST be a string containing the slot_name. The second item MUST be a boolean reflecting the active state of the replication slot. The third item MUST be a string containing the LSN of the oldest WAL which still might be required by the consumer of this slot.   # noqa: E501

        :param replication_slot: The replication_slot of this Status.
        :type replication_slot: List[object]
        """
        if replication_slot is not None and len(replication_slot) > 3:
            raise ValueError(
                "Invalid value for `replication_slot`, number of items must be less than or equal to `3`"
            )  # noqa: E501
        if replication_slot is not None and len(replication_slot) < 3:
            raise ValueError(
                "Invalid value for `replication_slot`, number of items must be greater than or equal to `3`"
            )  # noqa: E501

        self._replication_slot = replication_slot

    @property
    def replication_slot_support(self):
        """Gets the replication_slot_support of this Status.

        Whether the PostgreSQL server supports replication slots  # noqa: E501

        :return: The replication_slot_support of this Status.
        :rtype: bool
        """
        return self._replication_slot_support

    @replication_slot_support.setter
    def replication_slot_support(self, replication_slot_support):
        """Sets the replication_slot_support of this Status.

        Whether the PostgreSQL server supports replication slots  # noqa: E501

        :param replication_slot_support: The replication_slot_support of this Status.
        :type replication_slot_support: bool
        """

        self._replication_slot_support = replication_slot_support

    @property
    def server_txt_version(self):
        """Gets the server_txt_version of this Status.

        The version of the PostgreSQL server as human-readable text  # noqa: E501

        :return: The server_txt_version of this Status.
        :rtype: str
        """
        return self._server_txt_version

    @server_txt_version.setter
    def server_txt_version(self, server_txt_version):
        """Sets the server_txt_version of this Status.

        The version of the PostgreSQL server as human-readable text  # noqa: E501

        :param server_txt_version: The server_txt_version of this Status.
        :type server_txt_version: str
        """

        self._server_txt_version = server_txt_version

    @property
    def stats_reset(self):
        """Gets the stats_reset of this Status.

        The time at which statistics were last reset for this PostgreSQL server (in ISO 8601 format in UTC)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :return: The stats_reset of this Status.
        :rtype: str
        """
        return self._stats_reset

    @stats_reset.setter
    def stats_reset(self, stats_reset):
        """Sets the stats_reset of this Status.

        The time at which statistics were last reset for this PostgreSQL server (in ISO 8601 format in UTC)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :param stats_reset: The stats_reset of this Status.
        :type stats_reset: str
        """
        if stats_reset is not None and not re.search(
            r"^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
            stats_reset,
        ):  # noqa: E501
            msg = (
                "Invalid value for `stats_reset`, must be a follow pattern or equal to "
                "`{}`, got `{}`.".format(
                    "^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
                    stats_reset,
                )
            )  # noqa: W605
            raise ValueError(msg)  # noqa: E501

        self._stats_reset = stats_reset

    @property
    def synchronous_standby_names(self):
        """Gets the synchronous_standby_names of this Status.

        The current value of synchronous_standby_names on the PostgreSQL server   # noqa: E501

        :return: The synchronous_standby_names of this Status.
        :rtype: List[str]
        """
        return self._synchronous_standby_names

    @synchronous_standby_names.setter
    def synchronous_standby_names(self, synchronous_standby_names):
        """Sets the synchronous_standby_names of this Status.

        The current value of synchronous_standby_names on the PostgreSQL server   # noqa: E501

        :param synchronous_standby_names: The synchronous_standby_names of this Status.
        :type synchronous_standby_names: List[str]
        """

        self._synchronous_standby_names = synchronous_standby_names

    @property
    def wal_compression(self):
        """Gets the wal_compression of this Status.

        The current value of wal_compression on the PostgreSQL server  # noqa: E501

        :return: The wal_compression of this Status.
        :rtype: str
        """
        return self._wal_compression

    @wal_compression.setter
    def wal_compression(self, wal_compression):
        """Sets the wal_compression of this Status.

        The current value of wal_compression on the PostgreSQL server  # noqa: E501

        :param wal_compression: The wal_compression of this Status.
        :type wal_compression: str
        """

        self._wal_compression = wal_compression

    @property
    def wal_keep_size(self):
        """Gets the wal_keep_size of this Status.

        The current value of wal_keep_size on the PostgreSQL server  # noqa: E501

        :return: The wal_keep_size of this Status.
        :rtype: str
        """
        return self._wal_keep_size

    @wal_keep_size.setter
    def wal_keep_size(self, wal_keep_size):
        """Sets the wal_keep_size of this Status.

        The current value of wal_keep_size on the PostgreSQL server  # noqa: E501

        :param wal_keep_size: The wal_keep_size of this Status.
        :type wal_keep_size: str
        """

        self._wal_keep_size = wal_keep_size

    @property
    def wal_level(self):
        """Gets the wal_level of this Status.

        The current value of wal_level on the PostgreSQL server  # noqa: E501

        :return: The wal_level of this Status.
        :rtype: str
        """
        return self._wal_level

    @wal_level.setter
    def wal_level(self, wal_level):
        """Sets the wal_level of this Status.

        The current value of wal_level on the PostgreSQL server  # noqa: E501

        :param wal_level: The wal_level of this Status.
        :type wal_level: str
        """

        self._wal_level = wal_level

    @property
    def xlog_segment_size(self):
        """Gets the xlog_segment_size of this Status.

        The current WAL segment size in bytes as reported by the PostgreSQL server   # noqa: E501

        :return: The xlog_segment_size of this Status.
        :rtype: int
        """
        return self._xlog_segment_size

    @xlog_segment_size.setter
    def xlog_segment_size(self, xlog_segment_size):
        """Sets the xlog_segment_size of this Status.

        The current WAL segment size in bytes as reported by the PostgreSQL server   # noqa: E501

        :param xlog_segment_size: The xlog_segment_size of this Status.
        :type xlog_segment_size: int
        """

        self._xlog_segment_size = xlog_segment_size
