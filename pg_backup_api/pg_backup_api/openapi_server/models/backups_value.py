# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2021-2022
#
# This file is part of Postgres Backup API.
#
# Postgres Backup API is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Postgres Backup API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Postgres Backup API.  If not, see <http://www.gnu.org/licenses/>.

# This file was autogenerated by OpenAPI Generator.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pg_backup_api.openapi_server.models.base_model_ import Model
from pg_backup_api.openapi_server.models.copy_stats import CopyStats
import re
from pg_backup_api.openapi_server import util

from pg_backup_api.openapi_server.models.copy_stats import CopyStats  # noqa: E501
import re  # noqa: E501


class BackupsValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        backup_id=None,
        backup_label=None,
        begin_offset=None,
        begin_time=None,
        begin_wal=None,
        begin_xlog=None,
        config_file=None,
        copy_stats=None,
        deduplicated_size=None,
        end_offset=None,
        end_time=None,
        end_wal=None,
        end_xlog=None,
        error=None,
        hba_file=None,
        ident_file=None,
        included_files=None,
        mode=None,
        pgdata=None,
        server_name=None,
        size=None,
        status=None,
        systemid=None,
        tablespaces=None,
        timeline=None,
        version=None,
        xlog_segment_size=None,
    ):  # noqa: E501
        """BackupsValue - a model defined in OpenAPI

        :param backup_id: The backup_id of this BackupsValue.  # noqa: E501
        :type backup_id: str
        :param backup_label: The backup_label of this BackupsValue.  # noqa: E501
        :type backup_label: str
        :param begin_offset: The begin_offset of this BackupsValue.  # noqa: E501
        :type begin_offset: int
        :param begin_time: The begin_time of this BackupsValue.  # noqa: E501
        :type begin_time: str
        :param begin_wal: The begin_wal of this BackupsValue.  # noqa: E501
        :type begin_wal: str
        :param begin_xlog: The begin_xlog of this BackupsValue.  # noqa: E501
        :type begin_xlog: str
        :param config_file: The config_file of this BackupsValue.  # noqa: E501
        :type config_file: str
        :param copy_stats: The copy_stats of this BackupsValue.  # noqa: E501
        :type copy_stats: CopyStats
        :param deduplicated_size: The deduplicated_size of this BackupsValue.  # noqa: E501
        :type deduplicated_size: int
        :param end_offset: The end_offset of this BackupsValue.  # noqa: E501
        :type end_offset: int
        :param end_time: The end_time of this BackupsValue.  # noqa: E501
        :type end_time: str
        :param end_wal: The end_wal of this BackupsValue.  # noqa: E501
        :type end_wal: str
        :param end_xlog: The end_xlog of this BackupsValue.  # noqa: E501
        :type end_xlog: str
        :param error: The error of this BackupsValue.  # noqa: E501
        :type error: str
        :param hba_file: The hba_file of this BackupsValue.  # noqa: E501
        :type hba_file: str
        :param ident_file: The ident_file of this BackupsValue.  # noqa: E501
        :type ident_file: str
        :param included_files: The included_files of this BackupsValue.  # noqa: E501
        :type included_files: List[str]
        :param mode: The mode of this BackupsValue.  # noqa: E501
        :type mode: str
        :param pgdata: The pgdata of this BackupsValue.  # noqa: E501
        :type pgdata: str
        :param server_name: The server_name of this BackupsValue.  # noqa: E501
        :type server_name: str
        :param size: The size of this BackupsValue.  # noqa: E501
        :type size: int
        :param status: The status of this BackupsValue.  # noqa: E501
        :type status: str
        :param systemid: The systemid of this BackupsValue.  # noqa: E501
        :type systemid: str
        :param tablespaces: The tablespaces of this BackupsValue.  # noqa: E501
        :type tablespaces: List[List]
        :param timeline: The timeline of this BackupsValue.  # noqa: E501
        :type timeline: int
        :param version: The version of this BackupsValue.  # noqa: E501
        :type version: int
        :param xlog_segment_size: The xlog_segment_size of this BackupsValue.  # noqa: E501
        :type xlog_segment_size: int
        """
        self.openapi_types = {
            "backup_id": str,
            "backup_label": str,
            "begin_offset": int,
            "begin_time": str,
            "begin_wal": str,
            "begin_xlog": str,
            "config_file": str,
            "copy_stats": CopyStats,
            "deduplicated_size": int,
            "end_offset": int,
            "end_time": str,
            "end_wal": str,
            "end_xlog": str,
            "error": str,
            "hba_file": str,
            "ident_file": str,
            "included_files": List[str],
            "mode": str,
            "pgdata": str,
            "server_name": str,
            "size": int,
            "status": str,
            "systemid": str,
            "tablespaces": List[List],
            "timeline": int,
            "version": int,
            "xlog_segment_size": int,
        }

        self.attribute_map = {
            "backup_id": "backup_id",
            "backup_label": "backup_label",
            "begin_offset": "begin_offset",
            "begin_time": "begin_time",
            "begin_wal": "begin_wal",
            "begin_xlog": "begin_xlog",
            "config_file": "config_file",
            "copy_stats": "copy_stats",
            "deduplicated_size": "deduplicated_size",
            "end_offset": "end_offset",
            "end_time": "end_time",
            "end_wal": "end_wal",
            "end_xlog": "end_xlog",
            "error": "error",
            "hba_file": "hba_file",
            "ident_file": "ident_file",
            "included_files": "included_files",
            "mode": "mode",
            "pgdata": "pgdata",
            "server_name": "server_name",
            "size": "size",
            "status": "status",
            "systemid": "systemid",
            "tablespaces": "tablespaces",
            "timeline": "timeline",
            "version": "version",
            "xlog_segment_size": "xlog_segment_size",
        }

        self._backup_id = backup_id
        self._backup_label = backup_label
        self._begin_offset = begin_offset
        self._begin_time = begin_time
        self._begin_wal = begin_wal
        self._begin_xlog = begin_xlog
        self._config_file = config_file
        self._copy_stats = copy_stats
        self._deduplicated_size = deduplicated_size
        self._end_offset = end_offset
        self._end_time = end_time
        self._end_wal = end_wal
        self._end_xlog = end_xlog
        self._error = error
        self._hba_file = hba_file
        self._ident_file = ident_file
        self._included_files = included_files
        self._mode = mode
        self._pgdata = pgdata
        self._server_name = server_name
        self._size = size
        self._status = status
        self._systemid = systemid
        self._tablespaces = tablespaces
        self._timeline = timeline
        self._version = version
        self._xlog_segment_size = xlog_segment_size

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Backups_value of this BackupsValue.  # noqa: E501
        :rtype: BackupsValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this BackupsValue.

        The backup ID of the backup  # noqa: E501

        :return: The backup_id of this BackupsValue.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this BackupsValue.

        The backup ID of the backup  # noqa: E501

        :param backup_id: The backup_id of this BackupsValue.
        :type backup_id: str
        """

        self._backup_id = backup_id

    @property
    def backup_label(self):
        """Gets the backup_label of this BackupsValue.

        The backup label generated by PostgreSQL  # noqa: E501

        :return: The backup_label of this BackupsValue.
        :rtype: str
        """
        return self._backup_label

    @backup_label.setter
    def backup_label(self, backup_label):
        """Sets the backup_label of this BackupsValue.

        The backup label generated by PostgreSQL  # noqa: E501

        :param backup_label: The backup_label of this BackupsValue.
        :type backup_label: str
        """

        self._backup_label = backup_label

    @property
    def begin_offset(self):
        """Gets the begin_offset of this BackupsValue.

        The byte offset of the current WAL at the start of the backup  # noqa: E501

        :return: The begin_offset of this BackupsValue.
        :rtype: int
        """
        return self._begin_offset

    @begin_offset.setter
    def begin_offset(self, begin_offset):
        """Sets the begin_offset of this BackupsValue.

        The byte offset of the current WAL at the start of the backup  # noqa: E501

        :param begin_offset: The begin_offset of this BackupsValue.
        :type begin_offset: int
        """

        self._begin_offset = begin_offset

    @property
    def begin_time(self):
        """Gets the begin_time of this BackupsValue.

        The system time of the Barman server at the start of the backup (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :return: The begin_time of this BackupsValue.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this BackupsValue.

        The system time of the Barman server at the start of the backup (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :param begin_time: The begin_time of this BackupsValue.
        :type begin_time: str
        """
        if begin_time is not None and not re.search(
            r"^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
            begin_time,
        ):  # noqa: E501
            msg = (
                "Invalid value for `begin_time`, must be a follow pattern or equal to "
                "`{}`, got `{}`.".format(
                    "^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
                    begin_time,
                )
            )  # noqa: W605
            raise ValueError(msg)  # noqa: E501

        self._begin_time = begin_time

    @property
    def begin_wal(self):
        """Gets the begin_wal of this BackupsValue.

        The current WAL segment at the start of the backup  # noqa: E501

        :return: The begin_wal of this BackupsValue.
        :rtype: str
        """
        return self._begin_wal

    @begin_wal.setter
    def begin_wal(self, begin_wal):
        """Sets the begin_wal of this BackupsValue.

        The current WAL segment at the start of the backup  # noqa: E501

        :param begin_wal: The begin_wal of this BackupsValue.
        :type begin_wal: str
        """

        self._begin_wal = begin_wal

    @property
    def begin_xlog(self):
        """Gets the begin_xlog of this BackupsValue.

        The LSN of the PostgreSQL server at the start of the backup  # noqa: E501

        :return: The begin_xlog of this BackupsValue.
        :rtype: str
        """
        return self._begin_xlog

    @begin_xlog.setter
    def begin_xlog(self, begin_xlog):
        """Sets the begin_xlog of this BackupsValue.

        The LSN of the PostgreSQL server at the start of the backup  # noqa: E501

        :param begin_xlog: The begin_xlog of this BackupsValue.
        :type begin_xlog: str
        """

        self._begin_xlog = begin_xlog

    @property
    def config_file(self):
        """Gets the config_file of this BackupsValue.

        The path to the `postgresql.conf` file of the PostgreSQL server when the backup was taken   # noqa: E501

        :return: The config_file of this BackupsValue.
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file):
        """Sets the config_file of this BackupsValue.

        The path to the `postgresql.conf` file of the PostgreSQL server when the backup was taken   # noqa: E501

        :param config_file: The config_file of this BackupsValue.
        :type config_file: str
        """

        self._config_file = config_file

    @property
    def copy_stats(self):
        """Gets the copy_stats of this BackupsValue.


        :return: The copy_stats of this BackupsValue.
        :rtype: CopyStats
        """
        return self._copy_stats

    @copy_stats.setter
    def copy_stats(self, copy_stats):
        """Sets the copy_stats of this BackupsValue.


        :param copy_stats: The copy_stats of this BackupsValue.
        :type copy_stats: CopyStats
        """

        self._copy_stats = copy_stats

    @property
    def deduplicated_size(self):
        """Gets the deduplicated_size of this BackupsValue.

        The size of the backup in bytes accounting for any hard links to files in previous backups   # noqa: E501

        :return: The deduplicated_size of this BackupsValue.
        :rtype: int
        """
        return self._deduplicated_size

    @deduplicated_size.setter
    def deduplicated_size(self, deduplicated_size):
        """Sets the deduplicated_size of this BackupsValue.

        The size of the backup in bytes accounting for any hard links to files in previous backups   # noqa: E501

        :param deduplicated_size: The deduplicated_size of this BackupsValue.
        :type deduplicated_size: int
        """

        self._deduplicated_size = deduplicated_size

    @property
    def end_offset(self):
        """Gets the end_offset of this BackupsValue.

        The byte offset of the current WAL at the end of the backup  # noqa: E501

        :return: The end_offset of this BackupsValue.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this BackupsValue.

        The byte offset of the current WAL at the end of the backup  # noqa: E501

        :param end_offset: The end_offset of this BackupsValue.
        :type end_offset: int
        """

        self._end_offset = end_offset

    @property
    def end_time(self):
        """Gets the end_time of this BackupsValue.

        The system time of the Barman server at the end of the backup (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :return: The end_time of this BackupsValue.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BackupsValue.

        The system time of the Barman server at the end of the backup (in ISO 8601 in the local timezone of the server)   # noqa: E501
        Example: '2020-01-31T00:00:00.0000+01:00'

        :param end_time: The end_time of this BackupsValue.
        :type end_time: str
        """
        if end_time is not None and not re.search(
            r"^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
            end_time,
        ):  # noqa: E501
            msg = (
                "Invalid value for `end_time`, must be a follow pattern or equal to "
                "`{}`, got `{}`.".format(
                    "^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+[+-][0-2]\d:[0-5]\d$",
                    end_time,
                )
            )  # noqa: W605
            raise ValueError(msg)  # noqa: E501

        self._end_time = end_time

    @property
    def end_wal(self):
        """Gets the end_wal of this BackupsValue.

        The current WAL segment at the end of the backup  # noqa: E501

        :return: The end_wal of this BackupsValue.
        :rtype: str
        """
        return self._end_wal

    @end_wal.setter
    def end_wal(self, end_wal):
        """Sets the end_wal of this BackupsValue.

        The current WAL segment at the end of the backup  # noqa: E501

        :param end_wal: The end_wal of this BackupsValue.
        :type end_wal: str
        """

        self._end_wal = end_wal

    @property
    def end_xlog(self):
        """Gets the end_xlog of this BackupsValue.

        The LSN of the PostgreSQL server at the end of the backup  # noqa: E501

        :return: The end_xlog of this BackupsValue.
        :rtype: str
        """
        return self._end_xlog

    @end_xlog.setter
    def end_xlog(self, end_xlog):
        """Sets the end_xlog of this BackupsValue.

        The LSN of the PostgreSQL server at the end of the backup  # noqa: E501

        :param end_xlog: The end_xlog of this BackupsValue.
        :type end_xlog: str
        """

        self._end_xlog = end_xlog

    @property
    def error(self):
        """Gets the error of this BackupsValue.

        Error message (if the backup failed)  # noqa: E501

        :return: The error of this BackupsValue.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BackupsValue.

        Error message (if the backup failed)  # noqa: E501

        :param error: The error of this BackupsValue.
        :type error: str
        """

        self._error = error

    @property
    def hba_file(self):
        """Gets the hba_file of this BackupsValue.

        The path to the `pg_hba.conf` file of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :return: The hba_file of this BackupsValue.
        :rtype: str
        """
        return self._hba_file

    @hba_file.setter
    def hba_file(self, hba_file):
        """Sets the hba_file of this BackupsValue.

        The path to the `pg_hba.conf` file of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :param hba_file: The hba_file of this BackupsValue.
        :type hba_file: str
        """

        self._hba_file = hba_file

    @property
    def ident_file(self):
        """Gets the ident_file of this BackupsValue.

        The path to the `pg_ident.conf` file of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :return: The ident_file of this BackupsValue.
        :rtype: str
        """
        return self._ident_file

    @ident_file.setter
    def ident_file(self, ident_file):
        """Sets the ident_file of this BackupsValue.

        The path to the `pg_ident.conf` file of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :param ident_file: The ident_file of this BackupsValue.
        :type ident_file: str
        """

        self._ident_file = ident_file

    @property
    def included_files(self):
        """Gets the included_files of this BackupsValue.

        All files referenced by include directives in the PostgreSQL config which were included in the backup   # noqa: E501

        :return: The included_files of this BackupsValue.
        :rtype: List[str]
        """
        return self._included_files

    @included_files.setter
    def included_files(self, included_files):
        """Sets the included_files of this BackupsValue.

        All files referenced by include directives in the PostgreSQL config which were included in the backup   # noqa: E501

        :param included_files: The included_files of this BackupsValue.
        :type included_files: List[str]
        """

        self._included_files = included_files

    @property
    def mode(self):
        """Gets the mode of this BackupsValue.

        The combined `backup_method` and `backup_options` configured for the server at the time of the backup - can be one of: `local-rsync-concurrent`, `local-rsync-exclusive`, `postgres-concurrent`, `postgres-exclusive`, `rsync-concurrent` or `rsync-exclusive`   # noqa: E501

        :return: The mode of this BackupsValue.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this BackupsValue.

        The combined `backup_method` and `backup_options` configured for the server at the time of the backup - can be one of: `local-rsync-concurrent`, `local-rsync-exclusive`, `postgres-concurrent`, `postgres-exclusive`, `rsync-concurrent` or `rsync-exclusive`   # noqa: E501

        :param mode: The mode of this BackupsValue.
        :type mode: str
        """

        self._mode = mode

    @property
    def pgdata(self):
        """Gets the pgdata of this BackupsValue.

        The path to the PGDATA directory of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :return: The pgdata of this BackupsValue.
        :rtype: str
        """
        return self._pgdata

    @pgdata.setter
    def pgdata(self, pgdata):
        """Sets the pgdata of this BackupsValue.

        The path to the PGDATA directory of the PostgreSQL server at the time the backup was taken   # noqa: E501

        :param pgdata: The pgdata of this BackupsValue.
        :type pgdata: str
        """

        self._pgdata = pgdata

    @property
    def server_name(self):
        """Gets the server_name of this BackupsValue.

        The name of this server as configured in Barman  # noqa: E501

        :return: The server_name of this BackupsValue.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this BackupsValue.

        The name of this server as configured in Barman  # noqa: E501

        :param server_name: The server_name of this BackupsValue.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def size(self):
        """Gets the size of this BackupsValue.

        The size of the backup in bytes  # noqa: E501

        :return: The size of this BackupsValue.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BackupsValue.

        The size of the backup in bytes  # noqa: E501

        :param size: The size of this BackupsValue.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this BackupsValue.

        The current status of the backup  # noqa: E501

        :return: The status of this BackupsValue.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupsValue.

        The current status of the backup  # noqa: E501

        :param status: The status of this BackupsValue.
        :type status: str
        """
        allowed_values = [
            "DONE",
            "EMPTY",
            "FAILED",
            "STARTED",
            "SYNCING",
            "WAITING_FOR_WALS",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def systemid(self):
        """Gets the systemid of this BackupsValue.

        The system identifier of the PostgreSQL server from which the backup was taken   # noqa: E501

        :return: The systemid of this BackupsValue.
        :rtype: str
        """
        return self._systemid

    @systemid.setter
    def systemid(self, systemid):
        """Sets the systemid of this BackupsValue.

        The system identifier of the PostgreSQL server from which the backup was taken   # noqa: E501

        :param systemid: The systemid of this BackupsValue.
        :type systemid: str
        """

        self._systemid = systemid

    @property
    def tablespaces(self):
        """Gets the tablespaces of this BackupsValue.

        The tablespaces included in this backup  # noqa: E501

        :return: The tablespaces of this BackupsValue.
        :rtype: List[List]
        """
        return self._tablespaces

    @tablespaces.setter
    def tablespaces(self, tablespaces):
        """Sets the tablespaces of this BackupsValue.

        The tablespaces included in this backup  # noqa: E501

        :param tablespaces: The tablespaces of this BackupsValue.
        :type tablespaces: List[List]
        """

        self._tablespaces = tablespaces

    @property
    def timeline(self):
        """Gets the timeline of this BackupsValue.

        The timeline of the PostgreSQL server when the backup was taken  # noqa: E501

        :return: The timeline of this BackupsValue.
        :rtype: int
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this BackupsValue.

        The timeline of the PostgreSQL server when the backup was taken  # noqa: E501

        :param timeline: The timeline of this BackupsValue.
        :type timeline: int
        """

        self._timeline = timeline

    @property
    def version(self):
        """Gets the version of this BackupsValue.

        The version of the PostgreSQL server  # noqa: E501

        :return: The version of this BackupsValue.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BackupsValue.

        The version of the PostgreSQL server  # noqa: E501

        :param version: The version of this BackupsValue.
        :type version: int
        """

        self._version = version

    @property
    def xlog_segment_size(self):
        """Gets the xlog_segment_size of this BackupsValue.

        The WAL segment size in bytes as reported by the PostgreSQL server when the backup was taken   # noqa: E501

        :return: The xlog_segment_size of this BackupsValue.
        :rtype: int
        """
        return self._xlog_segment_size

    @xlog_segment_size.setter
    def xlog_segment_size(self, xlog_segment_size):
        """Sets the xlog_segment_size of this BackupsValue.

        The WAL segment size in bytes as reported by the PostgreSQL server when the backup was taken   # noqa: E501

        :param xlog_segment_size: The xlog_segment_size of this BackupsValue.
        :type xlog_segment_size: int
        """

        self._xlog_segment_size = xlog_segment_size
