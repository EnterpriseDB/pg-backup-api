# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2021-2022
#
# This file is part of Postgres Backup API.
#
# Postgres Backup API is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Postgres Backup API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Postgres Backup API.  If not, see <http://www.gnu.org/licenses/>.

# This file was autogenerated by OpenAPI Generator.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pg_backup_api.openapi_server.models.base_model_ import Model
from pg_backup_api.openapi_server.models.copy_stats_analysis_time_per_item import (
    CopyStatsAnalysisTimePerItem,
)
from pg_backup_api.openapi_server.models.copy_stats_copy_time_per_item import (
    CopyStatsCopyTimePerItem,
)
from pg_backup_api.openapi_server.models.copy_stats_serialized_copy_time_per_item import (
    CopyStatsSerializedCopyTimePerItem,
)
from pg_backup_api.openapi_server import util

from pg_backup_api.openapi_server.models.copy_stats_analysis_time_per_item import (
    CopyStatsAnalysisTimePerItem,
)  # noqa: E501
from pg_backup_api.openapi_server.models.copy_stats_copy_time_per_item import (
    CopyStatsCopyTimePerItem,
)  # noqa: E501
from pg_backup_api.openapi_server.models.copy_stats_serialized_copy_time_per_item import (
    CopyStatsSerializedCopyTimePerItem,
)  # noqa: E501


class CopyStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        analysis_time=None,
        analysis_time_per_item=None,
        copy_time=None,
        copy_time_per_item=None,
        number_of_workers=None,
        serialized_copy_time=None,
        serialized_copy_time_per_item=None,
        total_time=None,
    ):  # noqa: E501
        """CopyStats - a model defined in OpenAPI

        :param analysis_time: The analysis_time of this CopyStats.  # noqa: E501
        :type analysis_time: float
        :param analysis_time_per_item: The analysis_time_per_item of this CopyStats.  # noqa: E501
        :type analysis_time_per_item: CopyStatsAnalysisTimePerItem
        :param copy_time: The copy_time of this CopyStats.  # noqa: E501
        :type copy_time: float
        :param copy_time_per_item: The copy_time_per_item of this CopyStats.  # noqa: E501
        :type copy_time_per_item: CopyStatsCopyTimePerItem
        :param number_of_workers: The number_of_workers of this CopyStats.  # noqa: E501
        :type number_of_workers: int
        :param serialized_copy_time: The serialized_copy_time of this CopyStats.  # noqa: E501
        :type serialized_copy_time: float
        :param serialized_copy_time_per_item: The serialized_copy_time_per_item of this CopyStats.  # noqa: E501
        :type serialized_copy_time_per_item: CopyStatsSerializedCopyTimePerItem
        :param total_time: The total_time of this CopyStats.  # noqa: E501
        :type total_time: float
        """
        self.openapi_types = {
            "analysis_time": float,
            "analysis_time_per_item": CopyStatsAnalysisTimePerItem,
            "copy_time": float,
            "copy_time_per_item": CopyStatsCopyTimePerItem,
            "number_of_workers": int,
            "serialized_copy_time": float,
            "serialized_copy_time_per_item": CopyStatsSerializedCopyTimePerItem,
            "total_time": float,
        }

        self.attribute_map = {
            "analysis_time": "analysis_time",
            "analysis_time_per_item": "analysis_time_per_item",
            "copy_time": "copy_time",
            "copy_time_per_item": "copy_time_per_item",
            "number_of_workers": "number_of_workers",
            "serialized_copy_time": "serialized_copy_time",
            "serialized_copy_time_per_item": "serialized_copy_time_per_item",
            "total_time": "total_time",
        }

        self._analysis_time = analysis_time
        self._analysis_time_per_item = analysis_time_per_item
        self._copy_time = copy_time
        self._copy_time_per_item = copy_time_per_item
        self._number_of_workers = number_of_workers
        self._serialized_copy_time = serialized_copy_time
        self._serialized_copy_time_per_item = serialized_copy_time_per_item
        self._total_time = total_time

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CopyStats of this CopyStats.  # noqa: E501
        :rtype: CopyStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_time(self):
        """Gets the analysis_time of this CopyStats.

        Total number of seconds spent in the analysis phase during this backup   # noqa: E501

        :return: The analysis_time of this CopyStats.
        :rtype: float
        """
        return self._analysis_time

    @analysis_time.setter
    def analysis_time(self, analysis_time):
        """Sets the analysis_time of this CopyStats.

        Total number of seconds spent in the analysis phase during this backup   # noqa: E501

        :param analysis_time: The analysis_time of this CopyStats.
        :type analysis_time: float
        """

        self._analysis_time = analysis_time

    @property
    def analysis_time_per_item(self):
        """Gets the analysis_time_per_item of this CopyStats.


        :return: The analysis_time_per_item of this CopyStats.
        :rtype: CopyStatsAnalysisTimePerItem
        """
        return self._analysis_time_per_item

    @analysis_time_per_item.setter
    def analysis_time_per_item(self, analysis_time_per_item):
        """Sets the analysis_time_per_item of this CopyStats.


        :param analysis_time_per_item: The analysis_time_per_item of this CopyStats.
        :type analysis_time_per_item: CopyStatsAnalysisTimePerItem
        """

        self._analysis_time_per_item = analysis_time_per_item

    @property
    def copy_time(self):
        """Gets the copy_time of this CopyStats.

        Total wall-clock time spent in the copy phase during this backup in seconds   # noqa: E501

        :return: The copy_time of this CopyStats.
        :rtype: float
        """
        return self._copy_time

    @copy_time.setter
    def copy_time(self, copy_time):
        """Sets the copy_time of this CopyStats.

        Total wall-clock time spent in the copy phase during this backup in seconds   # noqa: E501

        :param copy_time: The copy_time of this CopyStats.
        :type copy_time: float
        """
        if copy_time is None:
            raise ValueError(
                "Invalid value for `copy_time`, must not be `None`"
            )  # noqa: E501

        self._copy_time = copy_time

    @property
    def copy_time_per_item(self):
        """Gets the copy_time_per_item of this CopyStats.


        :return: The copy_time_per_item of this CopyStats.
        :rtype: CopyStatsCopyTimePerItem
        """
        return self._copy_time_per_item

    @copy_time_per_item.setter
    def copy_time_per_item(self, copy_time_per_item):
        """Sets the copy_time_per_item of this CopyStats.


        :param copy_time_per_item: The copy_time_per_item of this CopyStats.
        :type copy_time_per_item: CopyStatsCopyTimePerItem
        """

        self._copy_time_per_item = copy_time_per_item

    @property
    def number_of_workers(self):
        """Gets the number_of_workers of this CopyStats.

        Number of workers used to copy files in the backup  # noqa: E501

        :return: The number_of_workers of this CopyStats.
        :rtype: int
        """
        return self._number_of_workers

    @number_of_workers.setter
    def number_of_workers(self, number_of_workers):
        """Sets the number_of_workers of this CopyStats.

        Number of workers used to copy files in the backup  # noqa: E501

        :param number_of_workers: The number_of_workers of this CopyStats.
        :type number_of_workers: int
        """

        self._number_of_workers = number_of_workers

    @property
    def serialized_copy_time(self):
        """Gets the serialized_copy_time of this CopyStats.

        Total time spent copying data across all copy jobs in seconds  # noqa: E501

        :return: The serialized_copy_time of this CopyStats.
        :rtype: float
        """
        return self._serialized_copy_time

    @serialized_copy_time.setter
    def serialized_copy_time(self, serialized_copy_time):
        """Sets the serialized_copy_time of this CopyStats.

        Total time spent copying data across all copy jobs in seconds  # noqa: E501

        :param serialized_copy_time: The serialized_copy_time of this CopyStats.
        :type serialized_copy_time: float
        """

        self._serialized_copy_time = serialized_copy_time

    @property
    def serialized_copy_time_per_item(self):
        """Gets the serialized_copy_time_per_item of this CopyStats.


        :return: The serialized_copy_time_per_item of this CopyStats.
        :rtype: CopyStatsSerializedCopyTimePerItem
        """
        return self._serialized_copy_time_per_item

    @serialized_copy_time_per_item.setter
    def serialized_copy_time_per_item(self, serialized_copy_time_per_item):
        """Sets the serialized_copy_time_per_item of this CopyStats.


        :param serialized_copy_time_per_item: The serialized_copy_time_per_item of this CopyStats.
        :type serialized_copy_time_per_item: CopyStatsSerializedCopyTimePerItem
        """

        self._serialized_copy_time_per_item = serialized_copy_time_per_item

    @property
    def total_time(self):
        """Gets the total_time of this CopyStats.

        Total wall-clock time spent taking the backup in seconds  # noqa: E501

        :return: The total_time of this CopyStats.
        :rtype: float
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this CopyStats.

        Total wall-clock time spent taking the backup in seconds  # noqa: E501

        :param total_time: The total_time of this CopyStats.
        :type total_time: float
        """
        if total_time is None:
            raise ValueError(
                "Invalid value for `total_time`, must not be `None`"
            )  # noqa: E501

        self._total_time = total_time
